// Code generated by timoni. DO NOT EDIT.

//timoni:generate timoni vendor crd -f crds.yaml

package v1

import "strings"

// AuthPolicy enables authentication and authorization for service
// workloads in a Gateway API network
#AuthPolicy: {
	// APIVersion defines the versioned schema of this representation
	// of an object.
	// Servers should convert recognized schemas to the latest
	// internal value, and
	// may reject unrecognized values.
	// More info:
	// https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
	apiVersion: "kuadrant.io/v1"

	// Kind is a string value representing the REST resource this
	// object represents.
	// Servers may infer this from the endpoint the client submits
	// requests to.
	// Cannot be updated.
	// In CamelCase.
	// More info:
	// https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
	kind: "AuthPolicy"
	metadata!: {
		name!: strings.MaxRunes(253) & strings.MinRunes(1) & {
			string
		}
		namespace!: strings.MaxRunes(63) & strings.MinRunes(1) & {
			string
		}
		labels?: {
			[string]: string
		}
		annotations?: {
			[string]: string
		}
	}
	spec!: #AuthPolicySpec
}
#AuthPolicySpec: {
	// Rules to apply as defaults. Can be overridden by more specific
	// policiy rules lower in the hierarchy and by less specific
	// policy overrides.
	// Use one of: defaults, overrides, or bare set of policy rules
	// (implicit defaults).
	defaults?: {
		// Named sets of patterns that can be referred in `when`
		// conditions and in pattern-matching authorization policy rules.
		patterns?: {
			[string]: {
				allOf: [...{
					// The binary operator to be applied to the content fetched from
					// the authorization JSON, for comparison with "value".
					// Possible values are: "eq" (equal to), "neq" (not equal to),
					// "incl" (includes; for arrays), "excl" (excludes; for arrays),
					// "matches" (regex)
					operator?: "eq" | "neq" | "incl" | "excl" | "matches"

					// Path selector to fetch content from the authorization JSON
					// (e.g. 'request.method').
					// Any pattern supported by
					// https://pkg.go.dev/github.com/tidwall/gjson can be used.
					// Authorino custom JSON path modifiers are also supported.
					selector?: string

					// The value of reference for the comparison with the content
					// fetched from the authorization JSON.
					// If used with the "matches" operator, the value must compile to
					// a valid Golang regex.
					value?: string
				}]
			}
		}

		// The auth rules of the policy.
		// See Authorino's AuthConfig CRD for more details.
		rules?: {
			// Authentication configs.
			// At least one config MUST evaluate to a valid identity object
			// for the auth request to be successful.
			authentication?: {
				[string]: {
					// Anonymous access.
					anonymous?: {}

					// Authentication based on API keys stored in Kubernetes secrets.
					apiKey?: {
						// Whether Authorino should look for API key secrets in all
						// namespaces or only in the same namespace as the AuthConfig.
						// Enabling this option in namespaced Authorino instances has no
						// effect.
						allNamespaces?: bool | *false

						// Label selector used by Authorino to match secrets from the
						// cluster storing valid credentials to authenticate to this
						// service
						selector: {
							// matchExpressions is a list of label selector requirements. The
							// requirements are ANDed.
							matchExpressions?: [...{
								// key is the label key that the selector applies to.
								key: string

								// operator represents a key's relationship to a set of values.
								// Valid operators are In, NotIn, Exists and DoesNotExist.
								operator: string

								// values is an array of string values. If the operator is In or
								// NotIn,
								// the values array must be non-empty. If the operator is Exists
								// or DoesNotExist,
								// the values array must be empty. This array is replaced during a
								// strategic
								// merge patch.
								values?: [...string]
							}]

							// matchLabels is a map of {key,value} pairs. A single {key,value}
							// in the matchLabels
							// map is equivalent to an element of matchExpressions, whose key
							// field is "key", the
							// operator is "In", and the values array contains only "value".
							// The requirements are ANDed.
							matchLabels?: {
								[string]: string
							}
						}
					}

					// Caching options for the resolved object returned when applying
					// this config.
					// Omit it to avoid caching objects for this config.
					cache?: {
						// Key used to store the entry in the cache.
						// The resolved key must be unique within the scope of this
						// particular config.
						key: {
							expression?: string

							// Simple path selector to fetch content from the authorization
							// JSON (e.g. 'request.method') or a string template with
							// variables that resolve to patterns (e.g. "Hello,
							// {auth.identity.name}!").
							// Any pattern supported by
							// https://pkg.go.dev/github.com/tidwall/gjson can be used.
							// The following Authorino custom modifiers are supported:
							// @extract:{sep:" ",pos:0}, @replace{old:"",new:""},
							// @case:upper|lower, @base64:encode|decode and @strip.
							selector?: string

							// Static value
							value?: _
						}

						// Duration (in seconds) of the external data in the cache before
						// pulled again from the source.
						ttl?: int | *60
					}

					// Defines where credentials are required to be passed in the
					// request for authentication based on this config.
					// If omitted, it defaults to credentials passed in the HTTP
					// Authorization header and the "Bearer" prefix prepended to the
					// secret credential value.
					credentials?: {
						authorizationHeader?: {
							prefix?: string
						}
						cookie?: {
							name: string
						}
						customHeader?: {
							name: string
						}
						queryString?: {
							name: string
						}
					}

					// Set default property values (claims) for the resolved identity
					// object, that are set before appending the object to
					// the authorization JSON. If the property is already present in
					// the resolved identity object, the default value is ignored.
					// It requires the resolved identity object to always be a JSON
					// object.
					// Do not use this option with identity objects of other JSON
					// types (array, string, etc).
					defaults?: {
						[string]: {
							expression?: string

							// Simple path selector to fetch content from the authorization
							// JSON (e.g. 'request.method') or a string template with
							// variables that resolve to patterns (e.g. "Hello,
							// {auth.identity.name}!").
							// Any pattern supported by
							// https://pkg.go.dev/github.com/tidwall/gjson can be used.
							// The following Authorino custom modifiers are supported:
							// @extract:{sep:" ",pos:0}, @replace{old:"",new:""},
							// @case:upper|lower, @base64:encode|decode and @strip.
							selector?: string

							// Static value
							value?: _
						}
					}

					// Authentication based on JWT tokens.
					jwt?: {
						// URL of the issuer of the JWT.
						// If `jwksUrl` is omitted, Authorino will append the path to the
						// OpenID Connect Well-Known Discovery endpoint
						// (i.e. "/.well-known/openid-configuration") to this URL, to
						// discover the OIDC configuration where to obtain
						// the "jkws_uri" claim from.
						// The value must coincide with the value of the "iss" (issuer)
						// claim of the discovered OpenID Connect configuration.
						issuerUrl?: string

						// Decides how long to wait before refreshing the JWKS (in
						// seconds).
						// If omitted, Authorino will never refresh the JWKS.
						ttl?: int
					}
					kubernetesTokenReview?: {
						// The list of audiences (scopes) that must be claimed in a
						// Kubernetes authentication token supplied in the request, and
						// reviewed by Authorino.
						// If omitted, Authorino will review tokens expecting the host
						// name of the requested protected service amongst the audiences.
						audiences?: [...string]
					}

					// Whether this config should generate individual observability
					// metrics
					metrics?: bool | *false

					// Authentication by OAuth2 token introspection.
					oauth2Introspection?: {
						credentialsRef: {
							// Name of the referent.
							// This field is effectively required, but due to backwards
							// compatibility is
							// allowed to be empty. Instances of this type with an empty value
							// here are
							// almost certainly wrong.
							// More info:
							// https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names
							name?: string | *""
						}

						// The full URL of the token introspection endpoint.
						endpoint: string

						// The token type hint for the token introspection.
						// If omitted, it defaults to "access_token".
						tokenTypeHint?: string
					}

					// Overrides the resolved identity object by setting the
					// additional properties (claims) specified in this config,
					// before appending the object to the authorization JSON.
					// It requires the resolved identity object to always be a JSON
					// object.
					// Do not use this option with identity objects of other JSON
					// types (array, string, etc).
					overrides?: {
						[string]: {
							expression?: string

							// Simple path selector to fetch content from the authorization
							// JSON (e.g. 'request.method') or a string template with
							// variables that resolve to patterns (e.g. "Hello,
							// {auth.identity.name}!").
							// Any pattern supported by
							// https://pkg.go.dev/github.com/tidwall/gjson can be used.
							// The following Authorino custom modifiers are supported:
							// @extract:{sep:" ",pos:0}, @replace{old:"",new:""},
							// @case:upper|lower, @base64:encode|decode and @strip.
							selector?: string

							// Static value
							value?: _
						}
					}

					// Identity object extracted from the context.
					// Use this method when authentication is performed beforehand by
					// a proxy and the resulting object passed to Authorino as JSON
					// in the auth request.
					plain?: {
						expression?: string

						// Simple path selector to fetch content from the authorization
						// JSON (e.g. 'request.method') or a string template with
						// variables that resolve to patterns (e.g. "Hello,
						// {auth.identity.name}!").
						// Any pattern supported by
						// https://pkg.go.dev/github.com/tidwall/gjson can be used.
						// The following Authorino custom modifiers are supported:
						// @extract:{sep:" ",pos:0}, @replace{old:"",new:""},
						// @case:upper|lower, @base64:encode|decode and @strip.
						selector?: string
					}

					// Priority group of the config.
					// All configs in the same priority group are evaluated
					// concurrently; consecutive priority groups are evaluated
					// sequentially.
					priority?: int | *0

					// Conditions for Authorino to enforce this config.
					// If omitted, the config will be enforced for all requests.
					// If present, all conditions must match for the config to be
					// enforced; otherwise, the config will be skipped.
					when?: [...{
						// A list of pattern expressions to be evaluated as a logical AND.
						all?: [...{}]

						// A list of pattern expressions to be evaluated as a logical OR.
						any?: [...{}]

						// The binary operator to be applied to the content fetched from
						// the authorization JSON, for comparison with "value".
						// Possible values are: "eq" (equal to), "neq" (not equal to),
						// "incl" (includes; for arrays), "excl" (excludes; for arrays),
						// "matches" (regex)
						operator?: "eq" | "neq" | "incl" | "excl" | "matches"

						// Reference to a named set of pattern expressions
						patternRef?: string
						predicate?:  string

						// Path selector to fetch content from the authorization JSON
						// (e.g. 'request.method').
						// Any pattern supported by
						// https://pkg.go.dev/github.com/tidwall/gjson can be used.
						// Authorino custom JSON path modifiers are also supported.
						selector?: string

						// The value of reference for the comparison with the content
						// fetched from the authorization JSON.
						// If used with the "matches" operator, the value must compile to
						// a valid Golang regex.
						value?: string
					}]

					// Authentication based on client X.509 certificates.
					// The certificates presented by the clients must be signed by a
					// trusted CA whose certificates are stored in Kubernetes
					// secrets.
					x509?: {
						// Whether Authorino should look for TLS secrets in all namespaces
						// or only in the same namespace as the AuthConfig.
						// Enabling this option in namespaced Authorino instances has no
						// effect.
						allNamespaces?: bool | *false

						// Label selector used by Authorino to match secrets from the
						// cluster storing trusted CA certificates to validate
						// clients trying to authenticate to this service
						selector: {
							// matchExpressions is a list of label selector requirements. The
							// requirements are ANDed.
							matchExpressions?: [...{
								// key is the label key that the selector applies to.
								key: string

								// operator represents a key's relationship to a set of values.
								// Valid operators are In, NotIn, Exists and DoesNotExist.
								operator: string

								// values is an array of string values. If the operator is In or
								// NotIn,
								// the values array must be non-empty. If the operator is Exists
								// or DoesNotExist,
								// the values array must be empty. This array is replaced during a
								// strategic
								// merge patch.
								values?: [...string]
							}]

							// matchLabels is a map of {key,value} pairs. A single {key,value}
							// in the matchLabels
							// map is equivalent to an element of matchExpressions, whose key
							// field is "key", the
							// operator is "In", and the values array contains only "value".
							// The requirements are ANDed.
							matchLabels?: {
								[string]: string
							}
						}
					}
				}
			}

			// Authorization policies.
			// All policies MUST evaluate to "allowed = true" for the auth
			// request be successful.
			authorization?: {
				[string]: {
					// Caching options for the resolved object returned when applying
					// this config.
					// Omit it to avoid caching objects for this config.
					cache?: {
						// Key used to store the entry in the cache.
						// The resolved key must be unique within the scope of this
						// particular config.
						key: {
							expression?: string

							// Simple path selector to fetch content from the authorization
							// JSON (e.g. 'request.method') or a string template with
							// variables that resolve to patterns (e.g. "Hello,
							// {auth.identity.name}!").
							// Any pattern supported by
							// https://pkg.go.dev/github.com/tidwall/gjson can be used.
							// The following Authorino custom modifiers are supported:
							// @extract:{sep:" ",pos:0}, @replace{old:"",new:""},
							// @case:upper|lower, @base64:encode|decode and @strip.
							selector?: string

							// Static value
							value?: _
						}

						// Duration (in seconds) of the external data in the cache before
						// pulled again from the source.
						ttl?: int | *60
					}

					// Authorization by Kubernetes SubjectAccessReview
					kubernetesSubjectAccessReview?: {
						// Groups the user must be a member of or, if `user` is omitted,
						// the groups to check for authorization in the Kubernetes RBAC.
						groups?: [...string]

						// Use resourceAttributes to check permissions on Kubernetes
						// resources.
						// If omitted, it performs a non-resource SubjectAccessReview,
						// with verb and path inferred from the request.
						resourceAttributes?: {
							// API group of the resource.
							// Use '*' for all API groups.
							group?: {
								expression?: string

								// Simple path selector to fetch content from the authorization
								// JSON (e.g. 'request.method') or a string template with
								// variables that resolve to patterns (e.g. "Hello,
								// {auth.identity.name}!").
								// Any pattern supported by
								// https://pkg.go.dev/github.com/tidwall/gjson can be used.
								// The following Authorino custom modifiers are supported:
								// @extract:{sep:" ",pos:0}, @replace{old:"",new:""},
								// @case:upper|lower, @base64:encode|decode and @strip.
								selector?: string

								// Static value
								value?: _
							}

							// Resource name
							// Omit it to check for authorization on all resources of the
							// specified kind.
							name?: {
								expression?: string

								// Simple path selector to fetch content from the authorization
								// JSON (e.g. 'request.method') or a string template with
								// variables that resolve to patterns (e.g. "Hello,
								// {auth.identity.name}!").
								// Any pattern supported by
								// https://pkg.go.dev/github.com/tidwall/gjson can be used.
								// The following Authorino custom modifiers are supported:
								// @extract:{sep:" ",pos:0}, @replace{old:"",new:""},
								// @case:upper|lower, @base64:encode|decode and @strip.
								selector?: string

								// Static value
								value?: _
							}

							// Namespace where the user must have permissions on the resource.
							namespace?: {
								expression?: string

								// Simple path selector to fetch content from the authorization
								// JSON (e.g. 'request.method') or a string template with
								// variables that resolve to patterns (e.g. "Hello,
								// {auth.identity.name}!").
								// Any pattern supported by
								// https://pkg.go.dev/github.com/tidwall/gjson can be used.
								// The following Authorino custom modifiers are supported:
								// @extract:{sep:" ",pos:0}, @replace{old:"",new:""},
								// @case:upper|lower, @base64:encode|decode and @strip.
								selector?: string

								// Static value
								value?: _
							}

							// Resource kind
							// Use '*' for all resource kinds.
							resource?: {
								expression?: string

								// Simple path selector to fetch content from the authorization
								// JSON (e.g. 'request.method') or a string template with
								// variables that resolve to patterns (e.g. "Hello,
								// {auth.identity.name}!").
								// Any pattern supported by
								// https://pkg.go.dev/github.com/tidwall/gjson can be used.
								// The following Authorino custom modifiers are supported:
								// @extract:{sep:" ",pos:0}, @replace{old:"",new:""},
								// @case:upper|lower, @base64:encode|decode and @strip.
								selector?: string

								// Static value
								value?: _
							}

							// Subresource kind
							subresource?: {
								expression?: string

								// Simple path selector to fetch content from the authorization
								// JSON (e.g. 'request.method') or a string template with
								// variables that resolve to patterns (e.g. "Hello,
								// {auth.identity.name}!").
								// Any pattern supported by
								// https://pkg.go.dev/github.com/tidwall/gjson can be used.
								// The following Authorino custom modifiers are supported:
								// @extract:{sep:" ",pos:0}, @replace{old:"",new:""},
								// @case:upper|lower, @base64:encode|decode and @strip.
								selector?: string

								// Static value
								value?: _
							}

							// Verb to check for authorization on the resource.
							// Use '*' for all verbs.
							verb?: {
								expression?: string

								// Simple path selector to fetch content from the authorization
								// JSON (e.g. 'request.method') or a string template with
								// variables that resolve to patterns (e.g. "Hello,
								// {auth.identity.name}!").
								// Any pattern supported by
								// https://pkg.go.dev/github.com/tidwall/gjson can be used.
								// The following Authorino custom modifiers are supported:
								// @extract:{sep:" ",pos:0}, @replace{old:"",new:""},
								// @case:upper|lower, @base64:encode|decode and @strip.
								selector?: string

								// Static value
								value?: _
							}
						}

						// User to check for authorization in the Kubernetes RBAC.
						// Omit it to check for group authorization only.
						user?: {
							expression?: string

							// Simple path selector to fetch content from the authorization
							// JSON (e.g. 'request.method') or a string template with
							// variables that resolve to patterns (e.g. "Hello,
							// {auth.identity.name}!").
							// Any pattern supported by
							// https://pkg.go.dev/github.com/tidwall/gjson can be used.
							// The following Authorino custom modifiers are supported:
							// @extract:{sep:" ",pos:0}, @replace{old:"",new:""},
							// @case:upper|lower, @base64:encode|decode and @strip.
							selector?: string

							// Static value
							value?: _
						}
					}

					// Whether this config should generate individual observability
					// metrics
					metrics?: bool | *false

					// Open Policy Agent (OPA) Rego policy.
					opa?: {
						// Returns the value of all Rego rules in the virtual document.
						// Values can be read in subsequent evaluators/phases of the Auth
						// Pipeline.
						// Otherwise, only the default `allow` rule will be exposed.
						// Returning all Rego rules can affect performance of OPA policies
						// during reconciliation (policy precompile) and at runtime.
						allValues?: bool | *false

						// Settings for fetching the OPA policy from an external registry.
						// Use it alternatively to 'rego'.
						// For the configurations of the HTTP request, the following
						// options are not implemented: 'method', 'body',
						// 'bodyParameters',
						// 'contentType', 'headers', 'oauth2'. Use it only with: 'url',
						// 'sharedSecret', 'credentials'.
						externalPolicy?: {
							// Raw body of the HTTP request.
							// Supersedes 'bodyParameters'; use either one or the other.
							// Use it with method=POST; for GET requests, set parameters as
							// query string in the 'endpoint' (placeholders can be used).
							body?: {
								expression?: string

								// Simple path selector to fetch content from the authorization
								// JSON (e.g. 'request.method') or a string template with
								// variables that resolve to patterns (e.g. "Hello,
								// {auth.identity.name}!").
								// Any pattern supported by
								// https://pkg.go.dev/github.com/tidwall/gjson can be used.
								// The following Authorino custom modifiers are supported:
								// @extract:{sep:" ",pos:0}, @replace{old:"",new:""},
								// @case:upper|lower, @base64:encode|decode and @strip.
								selector?: string

								// Static value
								value?: _
							}

							// Custom parameters to encode in the body of the HTTP request.
							// Superseded by 'body'; use either one or the other.
							// Use it with method=POST; for GET requests, set parameters as
							// query string in the 'endpoint' (placeholders can be used).
							bodyParameters?: {
								[string]: {
									expression?: string

									// Simple path selector to fetch content from the authorization
									// JSON (e.g. 'request.method') or a string template with
									// variables that resolve to patterns (e.g. "Hello,
									// {auth.identity.name}!").
									// Any pattern supported by
									// https://pkg.go.dev/github.com/tidwall/gjson can be used.
									// The following Authorino custom modifiers are supported:
									// @extract:{sep:" ",pos:0}, @replace{old:"",new:""},
									// @case:upper|lower, @base64:encode|decode and @strip.
									selector?: string

									// Static value
									value?: _
								}
							}

							// Content-Type of the request body. Shapes how 'bodyParameters'
							// are encoded.
							// Use it with method=POST; for GET requests, Content-Type is
							// automatically set to 'text/plain'.
							contentType?: "application/x-www-form-urlencoded" | "application/json" | *"application/x-www-form-urlencoded"

							// Defines where client credentials will be passed in the request
							// to the service.
							// If omitted, it defaults to client credentials passed in the
							// HTTP Authorization header and the "Bearer" prefix expected
							// prepended to the secret value.
							credentials?: {
								authorizationHeader?: {
									prefix?: string
								}
								cookie?: {
									name: string
								}
								customHeader?: {
									name: string
								}
								queryString?: {
									name: string
								}
							}

							// Custom headers in the HTTP request.
							headers?: {
								[string]: {
									expression?: string

									// Simple path selector to fetch content from the authorization
									// JSON (e.g. 'request.method') or a string template with
									// variables that resolve to patterns (e.g. "Hello,
									// {auth.identity.name}!").
									// Any pattern supported by
									// https://pkg.go.dev/github.com/tidwall/gjson can be used.
									// The following Authorino custom modifiers are supported:
									// @extract:{sep:" ",pos:0}, @replace{old:"",new:""},
									// @case:upper|lower, @base64:encode|decode and @strip.
									selector?: string

									// Static value
									value?: _
								}
							}

							// HTTP verb used in the request to the service. Accepted values:
							// GET (default), POST.
							// When the request method is POST, the authorization JSON is
							// passed in the body of the request.
							method?: "GET" | "POST" | "PUT" | "PATCH" | "DELETE" | "HEAD" | "OPTIONS" | "CONNECT" | "TRACE" | *"GET"

							// Authentication with the HTTP service by OAuth2 Client
							// Credentials grant.
							oauth2?: {
								// Caches and reuses the token until expired.
								// Set it to false to force fetch the token at every authorization
								// request regardless of expiration.
								cache?: bool | *true

								// OAuth2 Client ID.
								clientId: string

								// Reference to a Kuberentes Secret key that stores that OAuth2
								// Client Secret.
								clientSecretRef: {
									// The key of the secret to select from. Must be a valid secret
									// key.
									key: string

									// The name of the secret in the Authorino's namespace to select
									// from.
									name: string
								}

								// Optional extra parameters for the requests to the token URL.
								extraParams?: {
									[string]: string
								}

								// Optional scopes for the client credentials grant, if supported
								// by he OAuth2 server.
								scopes?: [...string]

								// Token endpoint URL of the OAuth2 resource server.
								tokenUrl: string
							}

							// Reference to a Secret key whose value will be passed by
							// Authorino in the request.
							// The HTTP service can use the shared secret to authenticate the
							// origin of the request.
							// Ignored if used together with oauth2.
							sharedSecretRef?: {
								// The key of the secret to select from. Must be a valid secret
								// key.
								key: string

								// The name of the secret in the Authorino's namespace to select
								// from.
								name: string
							}

							// Duration (in seconds) of the external data in the cache before
							// pulled again from the source.
							ttl?: int

							// Endpoint URL of the HTTP service.
							// The value can include variable placeholders in the format
							// "{selector}", where "selector" is any pattern supported
							// by https://pkg.go.dev/github.com/tidwall/gjson and selects
							// value from the authorization JSON.
							// E.g. https://ext-auth-server.io/metadata?p={request.path}
							url?:           string
							urlExpression?: string
						}

						// Authorization policy as a Rego language document.
						// The Rego document must include the "allow" condition, set by
						// Authorino to "false" by default (i.e. requests are
						// unauthorized unless changed).
						// The Rego document must NOT include the "package" declaration in
						// line 1.
						rego?: string
					}
					patternMatching?: {
						patterns: [...{
							// A list of pattern expressions to be evaluated as a logical AND.
							all?: [...{}]

							// A list of pattern expressions to be evaluated as a logical OR.
							any?: [...{}]

							// The binary operator to be applied to the content fetched from
							// the authorization JSON, for comparison with "value".
							// Possible values are: "eq" (equal to), "neq" (not equal to),
							// "incl" (includes; for arrays), "excl" (excludes; for arrays),
							// "matches" (regex)
							operator?: "eq" | "neq" | "incl" | "excl" | "matches"

							// Reference to a named set of pattern expressions
							patternRef?: string
							predicate?:  string

							// Path selector to fetch content from the authorization JSON
							// (e.g. 'request.method').
							// Any pattern supported by
							// https://pkg.go.dev/github.com/tidwall/gjson can be used.
							// Authorino custom JSON path modifiers are also supported.
							selector?: string

							// The value of reference for the comparison with the content
							// fetched from the authorization JSON.
							// If used with the "matches" operator, the value must compile to
							// a valid Golang regex.
							value?: string
						}]
					}

					// Priority group of the config.
					// All configs in the same priority group are evaluated
					// concurrently; consecutive priority groups are evaluated
					// sequentially.
					priority?: int | *0

					// Authorization decision delegated to external Authzed/SpiceDB
					// server.
					spicedb?: {
						// Hostname and port number to the GRPC interface of the SpiceDB
						// server (e.g. spicedb:50051).
						endpoint: string

						// Insecure HTTP connection (i.e. disables TLS verification)
						insecure?: bool

						// The name of the permission (or relation) on which to execute
						// the check.
						permission?: {
							expression?: string

							// Simple path selector to fetch content from the authorization
							// JSON (e.g. 'request.method') or a string template with
							// variables that resolve to patterns (e.g. "Hello,
							// {auth.identity.name}!").
							// Any pattern supported by
							// https://pkg.go.dev/github.com/tidwall/gjson can be used.
							// The following Authorino custom modifiers are supported:
							// @extract:{sep:" ",pos:0}, @replace{old:"",new:""},
							// @case:upper|lower, @base64:encode|decode and @strip.
							selector?: string

							// Static value
							value?: _
						}

						// The resource on which to check the permission or relation.
						resource?: {
							kind?: {
								expression?: string

								// Simple path selector to fetch content from the authorization
								// JSON (e.g. 'request.method') or a string template with
								// variables that resolve to patterns (e.g. "Hello,
								// {auth.identity.name}!").
								// Any pattern supported by
								// https://pkg.go.dev/github.com/tidwall/gjson can be used.
								// The following Authorino custom modifiers are supported:
								// @extract:{sep:" ",pos:0}, @replace{old:"",new:""},
								// @case:upper|lower, @base64:encode|decode and @strip.
								selector?: string

								// Static value
								value?: _
							}
							name?: {
								expression?: string

								// Simple path selector to fetch content from the authorization
								// JSON (e.g. 'request.method') or a string template with
								// variables that resolve to patterns (e.g. "Hello,
								// {auth.identity.name}!").
								// Any pattern supported by
								// https://pkg.go.dev/github.com/tidwall/gjson can be used.
								// The following Authorino custom modifiers are supported:
								// @extract:{sep:" ",pos:0}, @replace{old:"",new:""},
								// @case:upper|lower, @base64:encode|decode and @strip.
								selector?: string

								// Static value
								value?: _
							}
						}

						// Reference to a Secret key whose value will be used by Authorino
						// to authenticate with the Authzed service.
						sharedSecretRef?: {
							// The key of the secret to select from. Must be a valid secret
							// key.
							key: string

							// The name of the secret in the Authorino's namespace to select
							// from.
							name: string
						}

						// The subject that will be checked for the permission or
						// relation.
						subject?: {
							kind?: {
								expression?: string

								// Simple path selector to fetch content from the authorization
								// JSON (e.g. 'request.method') or a string template with
								// variables that resolve to patterns (e.g. "Hello,
								// {auth.identity.name}!").
								// Any pattern supported by
								// https://pkg.go.dev/github.com/tidwall/gjson can be used.
								// The following Authorino custom modifiers are supported:
								// @extract:{sep:" ",pos:0}, @replace{old:"",new:""},
								// @case:upper|lower, @base64:encode|decode and @strip.
								selector?: string

								// Static value
								value?: _
							}
							name?: {
								expression?: string

								// Simple path selector to fetch content from the authorization
								// JSON (e.g. 'request.method') or a string template with
								// variables that resolve to patterns (e.g. "Hello,
								// {auth.identity.name}!").
								// Any pattern supported by
								// https://pkg.go.dev/github.com/tidwall/gjson can be used.
								// The following Authorino custom modifiers are supported:
								// @extract:{sep:" ",pos:0}, @replace{old:"",new:""},
								// @case:upper|lower, @base64:encode|decode and @strip.
								selector?: string

								// Static value
								value?: _
							}
						}
					}

					// Conditions for Authorino to enforce this config.
					// If omitted, the config will be enforced for all requests.
					// If present, all conditions must match for the config to be
					// enforced; otherwise, the config will be skipped.
					when?: [...{
						// A list of pattern expressions to be evaluated as a logical AND.
						all?: [...{}]

						// A list of pattern expressions to be evaluated as a logical OR.
						any?: [...{}]

						// The binary operator to be applied to the content fetched from
						// the authorization JSON, for comparison with "value".
						// Possible values are: "eq" (equal to), "neq" (not equal to),
						// "incl" (includes; for arrays), "excl" (excludes; for arrays),
						// "matches" (regex)
						operator?: "eq" | "neq" | "incl" | "excl" | "matches"

						// Reference to a named set of pattern expressions
						patternRef?: string
						predicate?:  string

						// Path selector to fetch content from the authorization JSON
						// (e.g. 'request.method').
						// Any pattern supported by
						// https://pkg.go.dev/github.com/tidwall/gjson can be used.
						// Authorino custom JSON path modifiers are also supported.
						selector?: string

						// The value of reference for the comparison with the content
						// fetched from the authorization JSON.
						// If used with the "matches" operator, the value must compile to
						// a valid Golang regex.
						value?: string
					}]
				}
			}

			// Callback functions.
			// Authorino sends callbacks at the end of the auth pipeline to
			// the endpoints specified in this config.
			callbacks?: {
				[string]: {
					// Caching options for the resolved object returned when applying
					// this config.
					// Omit it to avoid caching objects for this config.
					cache?: {
						// Key used to store the entry in the cache.
						// The resolved key must be unique within the scope of this
						// particular config.
						key: {
							expression?: string

							// Simple path selector to fetch content from the authorization
							// JSON (e.g. 'request.method') or a string template with
							// variables that resolve to patterns (e.g. "Hello,
							// {auth.identity.name}!").
							// Any pattern supported by
							// https://pkg.go.dev/github.com/tidwall/gjson can be used.
							// The following Authorino custom modifiers are supported:
							// @extract:{sep:" ",pos:0}, @replace{old:"",new:""},
							// @case:upper|lower, @base64:encode|decode and @strip.
							selector?: string

							// Static value
							value?: _
						}

						// Duration (in seconds) of the external data in the cache before
						// pulled again from the source.
						ttl?: int | *60
					}

					// Settings of the external HTTP request
					http: {
						// Raw body of the HTTP request.
						// Supersedes 'bodyParameters'; use either one or the other.
						// Use it with method=POST; for GET requests, set parameters as
						// query string in the 'endpoint' (placeholders can be used).
						body?: {
							expression?: string

							// Simple path selector to fetch content from the authorization
							// JSON (e.g. 'request.method') or a string template with
							// variables that resolve to patterns (e.g. "Hello,
							// {auth.identity.name}!").
							// Any pattern supported by
							// https://pkg.go.dev/github.com/tidwall/gjson can be used.
							// The following Authorino custom modifiers are supported:
							// @extract:{sep:" ",pos:0}, @replace{old:"",new:""},
							// @case:upper|lower, @base64:encode|decode and @strip.
							selector?: string

							// Static value
							value?: _
						}

						// Custom parameters to encode in the body of the HTTP request.
						// Superseded by 'body'; use either one or the other.
						// Use it with method=POST; for GET requests, set parameters as
						// query string in the 'endpoint' (placeholders can be used).
						bodyParameters?: {
							[string]: {
								expression?: string

								// Simple path selector to fetch content from the authorization
								// JSON (e.g. 'request.method') or a string template with
								// variables that resolve to patterns (e.g. "Hello,
								// {auth.identity.name}!").
								// Any pattern supported by
								// https://pkg.go.dev/github.com/tidwall/gjson can be used.
								// The following Authorino custom modifiers are supported:
								// @extract:{sep:" ",pos:0}, @replace{old:"",new:""},
								// @case:upper|lower, @base64:encode|decode and @strip.
								selector?: string

								// Static value
								value?: _
							}
						}

						// Content-Type of the request body. Shapes how 'bodyParameters'
						// are encoded.
						// Use it with method=POST; for GET requests, Content-Type is
						// automatically set to 'text/plain'.
						contentType?: "application/x-www-form-urlencoded" | "application/json" | *"application/x-www-form-urlencoded"

						// Defines where client credentials will be passed in the request
						// to the service.
						// If omitted, it defaults to client credentials passed in the
						// HTTP Authorization header and the "Bearer" prefix expected
						// prepended to the secret value.
						credentials?: {
							authorizationHeader?: {
								prefix?: string
							}
							cookie?: {
								name: string
							}
							customHeader?: {
								name: string
							}
							queryString?: {
								name: string
							}
						}

						// Custom headers in the HTTP request.
						headers?: {
							[string]: {
								expression?: string

								// Simple path selector to fetch content from the authorization
								// JSON (e.g. 'request.method') or a string template with
								// variables that resolve to patterns (e.g. "Hello,
								// {auth.identity.name}!").
								// Any pattern supported by
								// https://pkg.go.dev/github.com/tidwall/gjson can be used.
								// The following Authorino custom modifiers are supported:
								// @extract:{sep:" ",pos:0}, @replace{old:"",new:""},
								// @case:upper|lower, @base64:encode|decode and @strip.
								selector?: string

								// Static value
								value?: _
							}
						}

						// HTTP verb used in the request to the service. Accepted values:
						// GET (default), POST.
						// When the request method is POST, the authorization JSON is
						// passed in the body of the request.
						method?: "GET" | "POST" | "PUT" | "PATCH" | "DELETE" | "HEAD" | "OPTIONS" | "CONNECT" | "TRACE" | *"GET"

						// Authentication with the HTTP service by OAuth2 Client
						// Credentials grant.
						oauth2?: {
							// Caches and reuses the token until expired.
							// Set it to false to force fetch the token at every authorization
							// request regardless of expiration.
							cache?: bool | *true

							// OAuth2 Client ID.
							clientId: string

							// Reference to a Kuberentes Secret key that stores that OAuth2
							// Client Secret.
							clientSecretRef: {
								// The key of the secret to select from. Must be a valid secret
								// key.
								key: string

								// The name of the secret in the Authorino's namespace to select
								// from.
								name: string
							}

							// Optional extra parameters for the requests to the token URL.
							extraParams?: {
								[string]: string
							}

							// Optional scopes for the client credentials grant, if supported
							// by he OAuth2 server.
							scopes?: [...string]

							// Token endpoint URL of the OAuth2 resource server.
							tokenUrl: string
						}

						// Reference to a Secret key whose value will be passed by
						// Authorino in the request.
						// The HTTP service can use the shared secret to authenticate the
						// origin of the request.
						// Ignored if used together with oauth2.
						sharedSecretRef?: {
							// The key of the secret to select from. Must be a valid secret
							// key.
							key: string

							// The name of the secret in the Authorino's namespace to select
							// from.
							name: string
						}

						// Endpoint URL of the HTTP service.
						// The value can include variable placeholders in the format
						// "{selector}", where "selector" is any pattern supported
						// by https://pkg.go.dev/github.com/tidwall/gjson and selects
						// value from the authorization JSON.
						// E.g. https://ext-auth-server.io/metadata?p={request.path}
						url?:           string
						urlExpression?: string
					}

					// Whether this config should generate individual observability
					// metrics
					metrics?: bool | *false

					// Priority group of the config.
					// All configs in the same priority group are evaluated
					// concurrently; consecutive priority groups are evaluated
					// sequentially.
					priority?: int | *0

					// Conditions for Authorino to enforce this config.
					// If omitted, the config will be enforced for all requests.
					// If present, all conditions must match for the config to be
					// enforced; otherwise, the config will be skipped.
					when?: [...{
						// A list of pattern expressions to be evaluated as a logical AND.
						all?: [...{}]

						// A list of pattern expressions to be evaluated as a logical OR.
						any?: [...{}]

						// The binary operator to be applied to the content fetched from
						// the authorization JSON, for comparison with "value".
						// Possible values are: "eq" (equal to), "neq" (not equal to),
						// "incl" (includes; for arrays), "excl" (excludes; for arrays),
						// "matches" (regex)
						operator?: "eq" | "neq" | "incl" | "excl" | "matches"

						// Reference to a named set of pattern expressions
						patternRef?: string
						predicate?:  string

						// Path selector to fetch content from the authorization JSON
						// (e.g. 'request.method').
						// Any pattern supported by
						// https://pkg.go.dev/github.com/tidwall/gjson can be used.
						// Authorino custom JSON path modifiers are also supported.
						selector?: string

						// The value of reference for the comparison with the content
						// fetched from the authorization JSON.
						// If used with the "matches" operator, the value must compile to
						// a valid Golang regex.
						value?: string
					}]
				}
			}

			// Metadata sources.
			// Authorino fetches auth metadata as JSON from sources specified
			// in this config.
			metadata?: {
				[string]: {
					// Caching options for the resolved object returned when applying
					// this config.
					// Omit it to avoid caching objects for this config.
					cache?: {
						// Key used to store the entry in the cache.
						// The resolved key must be unique within the scope of this
						// particular config.
						key: {
							expression?: string

							// Simple path selector to fetch content from the authorization
							// JSON (e.g. 'request.method') or a string template with
							// variables that resolve to patterns (e.g. "Hello,
							// {auth.identity.name}!").
							// Any pattern supported by
							// https://pkg.go.dev/github.com/tidwall/gjson can be used.
							// The following Authorino custom modifiers are supported:
							// @extract:{sep:" ",pos:0}, @replace{old:"",new:""},
							// @case:upper|lower, @base64:encode|decode and @strip.
							selector?: string

							// Static value
							value?: _
						}

						// Duration (in seconds) of the external data in the cache before
						// pulled again from the source.
						ttl?: int | *60
					}

					// External source of auth metadata via HTTP request
					http?: {
						// Raw body of the HTTP request.
						// Supersedes 'bodyParameters'; use either one or the other.
						// Use it with method=POST; for GET requests, set parameters as
						// query string in the 'endpoint' (placeholders can be used).
						body?: {
							expression?: string

							// Simple path selector to fetch content from the authorization
							// JSON (e.g. 'request.method') or a string template with
							// variables that resolve to patterns (e.g. "Hello,
							// {auth.identity.name}!").
							// Any pattern supported by
							// https://pkg.go.dev/github.com/tidwall/gjson can be used.
							// The following Authorino custom modifiers are supported:
							// @extract:{sep:" ",pos:0}, @replace{old:"",new:""},
							// @case:upper|lower, @base64:encode|decode and @strip.
							selector?: string

							// Static value
							value?: _
						}

						// Custom parameters to encode in the body of the HTTP request.
						// Superseded by 'body'; use either one or the other.
						// Use it with method=POST; for GET requests, set parameters as
						// query string in the 'endpoint' (placeholders can be used).
						bodyParameters?: {
							[string]: {
								expression?: string

								// Simple path selector to fetch content from the authorization
								// JSON (e.g. 'request.method') or a string template with
								// variables that resolve to patterns (e.g. "Hello,
								// {auth.identity.name}!").
								// Any pattern supported by
								// https://pkg.go.dev/github.com/tidwall/gjson can be used.
								// The following Authorino custom modifiers are supported:
								// @extract:{sep:" ",pos:0}, @replace{old:"",new:""},
								// @case:upper|lower, @base64:encode|decode and @strip.
								selector?: string

								// Static value
								value?: _
							}
						}

						// Content-Type of the request body. Shapes how 'bodyParameters'
						// are encoded.
						// Use it with method=POST; for GET requests, Content-Type is
						// automatically set to 'text/plain'.
						contentType?: "application/x-www-form-urlencoded" | "application/json" | *"application/x-www-form-urlencoded"

						// Defines where client credentials will be passed in the request
						// to the service.
						// If omitted, it defaults to client credentials passed in the
						// HTTP Authorization header and the "Bearer" prefix expected
						// prepended to the secret value.
						credentials?: {
							authorizationHeader?: {
								prefix?: string
							}
							cookie?: {
								name: string
							}
							customHeader?: {
								name: string
							}
							queryString?: {
								name: string
							}
						}

						// Custom headers in the HTTP request.
						headers?: {
							[string]: {
								expression?: string

								// Simple path selector to fetch content from the authorization
								// JSON (e.g. 'request.method') or a string template with
								// variables that resolve to patterns (e.g. "Hello,
								// {auth.identity.name}!").
								// Any pattern supported by
								// https://pkg.go.dev/github.com/tidwall/gjson can be used.
								// The following Authorino custom modifiers are supported:
								// @extract:{sep:" ",pos:0}, @replace{old:"",new:""},
								// @case:upper|lower, @base64:encode|decode and @strip.
								selector?: string

								// Static value
								value?: _
							}
						}

						// HTTP verb used in the request to the service. Accepted values:
						// GET (default), POST.
						// When the request method is POST, the authorization JSON is
						// passed in the body of the request.
						method?: "GET" | "POST" | "PUT" | "PATCH" | "DELETE" | "HEAD" | "OPTIONS" | "CONNECT" | "TRACE" | *"GET"

						// Authentication with the HTTP service by OAuth2 Client
						// Credentials grant.
						oauth2?: {
							// Caches and reuses the token until expired.
							// Set it to false to force fetch the token at every authorization
							// request regardless of expiration.
							cache?: bool | *true

							// OAuth2 Client ID.
							clientId: string

							// Reference to a Kuberentes Secret key that stores that OAuth2
							// Client Secret.
							clientSecretRef: {
								// The key of the secret to select from. Must be a valid secret
								// key.
								key: string

								// The name of the secret in the Authorino's namespace to select
								// from.
								name: string
							}

							// Optional extra parameters for the requests to the token URL.
							extraParams?: {
								[string]: string
							}

							// Optional scopes for the client credentials grant, if supported
							// by he OAuth2 server.
							scopes?: [...string]

							// Token endpoint URL of the OAuth2 resource server.
							tokenUrl: string
						}

						// Reference to a Secret key whose value will be passed by
						// Authorino in the request.
						// The HTTP service can use the shared secret to authenticate the
						// origin of the request.
						// Ignored if used together with oauth2.
						sharedSecretRef?: {
							// The key of the secret to select from. Must be a valid secret
							// key.
							key: string

							// The name of the secret in the Authorino's namespace to select
							// from.
							name: string
						}

						// Endpoint URL of the HTTP service.
						// The value can include variable placeholders in the format
						// "{selector}", where "selector" is any pattern supported
						// by https://pkg.go.dev/github.com/tidwall/gjson and selects
						// value from the authorization JSON.
						// E.g. https://ext-auth-server.io/metadata?p={request.path}
						url?:           string
						urlExpression?: string
					}

					// Whether this config should generate individual observability
					// metrics
					metrics?: bool | *false

					// Priority group of the config.
					// All configs in the same priority group are evaluated
					// concurrently; consecutive priority groups are evaluated
					// sequentially.
					priority?: int | *0

					// User-Managed Access (UMA) source of resource data.
					uma?: {
						credentialsRef: {
							// Name of the referent.
							// This field is effectively required, but due to backwards
							// compatibility is
							// allowed to be empty. Instances of this type with an empty value
							// here are
							// almost certainly wrong.
							// More info:
							// https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names
							name?: string | *""
						}

						// The endpoint of the UMA server.
						// The value must coincide with the "issuer" claim of the UMA
						// config discovered from the well-known uma configuration
						// endpoint.
						endpoint: string
					}
					userInfo?: {
						// The name of an OIDC-enabled JWT authentication config whose
						// OpenID Connect configuration discovered includes the OIDC
						// "userinfo_endpoint" claim.
						identitySource: string
					}

					// Conditions for Authorino to enforce this config.
					// If omitted, the config will be enforced for all requests.
					// If present, all conditions must match for the config to be
					// enforced; otherwise, the config will be skipped.
					when?: [...{
						// A list of pattern expressions to be evaluated as a logical AND.
						all?: [...{}]

						// A list of pattern expressions to be evaluated as a logical OR.
						any?: [...{}]

						// The binary operator to be applied to the content fetched from
						// the authorization JSON, for comparison with "value".
						// Possible values are: "eq" (equal to), "neq" (not equal to),
						// "incl" (includes; for arrays), "excl" (excludes; for arrays),
						// "matches" (regex)
						operator?: "eq" | "neq" | "incl" | "excl" | "matches"

						// Reference to a named set of pattern expressions
						patternRef?: string
						predicate?:  string

						// Path selector to fetch content from the authorization JSON
						// (e.g. 'request.method').
						// Any pattern supported by
						// https://pkg.go.dev/github.com/tidwall/gjson can be used.
						// Authorino custom JSON path modifiers are also supported.
						selector?: string

						// The value of reference for the comparison with the content
						// fetched from the authorization JSON.
						// If used with the "matches" operator, the value must compile to
						// a valid Golang regex.
						value?: string
					}]
				}
			}

			// Response items.
			// Authorino builds custom responses to the client of the auth
			// request.
			response?: {
				// Response items to be included in the auth response when the
				// request is authenticated and authorized.
				// For integration of Authorino via proxy, the proxy must use
				// these settings to propagate dynamic metadata and/or inject
				// data in the request.
				success?: {
					// Custom data made available to other filters managed by Kuadrant
					// (i.e. Rate Limit)
					filters?: {
						[string]: {
							// Caching options for the resolved object returned when applying
							// this config.
							// Omit it to avoid caching objects for this config.
							cache?: {
								// Key used to store the entry in the cache.
								// The resolved key must be unique within the scope of this
								// particular config.
								key: {
									expression?: string

									// Simple path selector to fetch content from the authorization
									// JSON (e.g. 'request.method') or a string template with
									// variables that resolve to patterns (e.g. "Hello,
									// {auth.identity.name}!").
									// Any pattern supported by
									// https://pkg.go.dev/github.com/tidwall/gjson can be used.
									// The following Authorino custom modifiers are supported:
									// @extract:{sep:" ",pos:0}, @replace{old:"",new:""},
									// @case:upper|lower, @base64:encode|decode and @strip.
									selector?: string

									// Static value
									value?: _
								}

								// Duration (in seconds) of the external data in the cache before
								// pulled again from the source.
								ttl?: int | *60
							}
							json?: {
								properties: {
									[string]: {
										expression?: string

										// Simple path selector to fetch content from the authorization
										// JSON (e.g. 'request.method') or a string template with
										// variables that resolve to patterns (e.g. "Hello,
										// {auth.identity.name}!").
										// Any pattern supported by
										// https://pkg.go.dev/github.com/tidwall/gjson can be used.
										// The following Authorino custom modifiers are supported:
										// @extract:{sep:" ",pos:0}, @replace{old:"",new:""},
										// @case:upper|lower, @base64:encode|decode and @strip.
										selector?: string

										// Static value
										value?: _
									}
								}
							}

							// The key used to add the custom response item (name of the HTTP
							// header or root property of the Dynamic Metadata object).
							// If omitted, it will be set to the name of the response config.
							key?: string

							// Whether this config should generate individual observability
							// metrics
							metrics?: bool | *false

							// Plain text content
							plain?: {
								expression?: string

								// Simple path selector to fetch content from the authorization
								// JSON (e.g. 'request.method') or a string template with
								// variables that resolve to patterns (e.g. "Hello,
								// {auth.identity.name}!").
								// Any pattern supported by
								// https://pkg.go.dev/github.com/tidwall/gjson can be used.
								// The following Authorino custom modifiers are supported:
								// @extract:{sep:" ",pos:0}, @replace{old:"",new:""},
								// @case:upper|lower, @base64:encode|decode and @strip.
								selector?: string

								// Static value
								value?: _
							}

							// Priority group of the config.
							// All configs in the same priority group are evaluated
							// concurrently; consecutive priority groups are evaluated
							// sequentially.
							priority?: int | *0

							// Conditions for Authorino to enforce this config.
							// If omitted, the config will be enforced for all requests.
							// If present, all conditions must match for the config to be
							// enforced; otherwise, the config will be skipped.
							when?: [...{
								// A list of pattern expressions to be evaluated as a logical AND.
								all?: [...{}]

								// A list of pattern expressions to be evaluated as a logical OR.
								any?: [...{}]

								// The binary operator to be applied to the content fetched from
								// the authorization JSON, for comparison with "value".
								// Possible values are: "eq" (equal to), "neq" (not equal to),
								// "incl" (includes; for arrays), "excl" (excludes; for arrays),
								// "matches" (regex)
								operator?: "eq" | "neq" | "incl" | "excl" | "matches"

								// Reference to a named set of pattern expressions
								patternRef?: string
								predicate?:  string

								// Path selector to fetch content from the authorization JSON
								// (e.g. 'request.method').
								// Any pattern supported by
								// https://pkg.go.dev/github.com/tidwall/gjson can be used.
								// Authorino custom JSON path modifiers are also supported.
								selector?: string

								// The value of reference for the comparison with the content
								// fetched from the authorization JSON.
								// If used with the "matches" operator, the value must compile to
								// a valid Golang regex.
								value?: string
							}]

							// Authorino Festival Wristband token
							wristband?: {
								// Any claims to be added to the wristband token apart from the
								// standard JWT claims (iss, iat, exp) added by default.
								customClaims?: {
									[string]: {
										expression?: string

										// Simple path selector to fetch content from the authorization
										// JSON (e.g. 'request.method') or a string template with
										// variables that resolve to patterns (e.g. "Hello,
										// {auth.identity.name}!").
										// Any pattern supported by
										// https://pkg.go.dev/github.com/tidwall/gjson can be used.
										// The following Authorino custom modifiers are supported:
										// @extract:{sep:" ",pos:0}, @replace{old:"",new:""},
										// @case:upper|lower, @base64:encode|decode and @strip.
										selector?: string

										// Static value
										value?: _
									}
								}

								// The endpoint to the Authorino service that issues the wristband
								// (format: <scheme>://<host>:<port>/<realm>, where <realm> =
								// <namespace>/<authorino-auth-config-resource-name/wristband-config-name)
								issuer: string

								// Reference by name to Kubernetes secrets and corresponding
								// signing algorithms.
								// The secrets must contain a `key.pem` entry whose value is the
								// signing key formatted as PEM.
								signingKeyRefs: [...{
									// Algorithm to sign the wristband token using the signing key
									// provided
									algorithm: "ES256" | "ES384" | "ES512" | "RS256" | "RS384" | "RS512"

									// Name of the signing key.
									// The value is used to reference the Kubernetes secret that
									// stores the key and in the `kid` claim of the wristband token
									// header.
									name: string
								}]

								// Time span of the wristband token, in seconds.
								tokenDuration?: int
							}
						}
					}

					// Custom headers to inject in the request.
					headers?: {
						[string]: {
							// Caching options for the resolved object returned when applying
							// this config.
							// Omit it to avoid caching objects for this config.
							cache?: {
								// Key used to store the entry in the cache.
								// The resolved key must be unique within the scope of this
								// particular config.
								key: {
									expression?: string

									// Simple path selector to fetch content from the authorization
									// JSON (e.g. 'request.method') or a string template with
									// variables that resolve to patterns (e.g. "Hello,
									// {auth.identity.name}!").
									// Any pattern supported by
									// https://pkg.go.dev/github.com/tidwall/gjson can be used.
									// The following Authorino custom modifiers are supported:
									// @extract:{sep:" ",pos:0}, @replace{old:"",new:""},
									// @case:upper|lower, @base64:encode|decode and @strip.
									selector?: string

									// Static value
									value?: _
								}

								// Duration (in seconds) of the external data in the cache before
								// pulled again from the source.
								ttl?: int | *60
							}
							json?: {
								properties: {
									[string]: {
										expression?: string

										// Simple path selector to fetch content from the authorization
										// JSON (e.g. 'request.method') or a string template with
										// variables that resolve to patterns (e.g. "Hello,
										// {auth.identity.name}!").
										// Any pattern supported by
										// https://pkg.go.dev/github.com/tidwall/gjson can be used.
										// The following Authorino custom modifiers are supported:
										// @extract:{sep:" ",pos:0}, @replace{old:"",new:""},
										// @case:upper|lower, @base64:encode|decode and @strip.
										selector?: string

										// Static value
										value?: _
									}
								}
							}

							// The key used to add the custom response item (name of the HTTP
							// header or root property of the Dynamic Metadata object).
							// If omitted, it will be set to the name of the response config.
							key?: string

							// Whether this config should generate individual observability
							// metrics
							metrics?: bool | *false

							// Plain text content
							plain?: {
								expression?: string

								// Simple path selector to fetch content from the authorization
								// JSON (e.g. 'request.method') or a string template with
								// variables that resolve to patterns (e.g. "Hello,
								// {auth.identity.name}!").
								// Any pattern supported by
								// https://pkg.go.dev/github.com/tidwall/gjson can be used.
								// The following Authorino custom modifiers are supported:
								// @extract:{sep:" ",pos:0}, @replace{old:"",new:""},
								// @case:upper|lower, @base64:encode|decode and @strip.
								selector?: string

								// Static value
								value?: _
							}

							// Priority group of the config.
							// All configs in the same priority group are evaluated
							// concurrently; consecutive priority groups are evaluated
							// sequentially.
							priority?: int | *0

							// Conditions for Authorino to enforce this config.
							// If omitted, the config will be enforced for all requests.
							// If present, all conditions must match for the config to be
							// enforced; otherwise, the config will be skipped.
							when?: [...{
								// A list of pattern expressions to be evaluated as a logical AND.
								all?: [...{}]

								// A list of pattern expressions to be evaluated as a logical OR.
								any?: [...{}]

								// The binary operator to be applied to the content fetched from
								// the authorization JSON, for comparison with "value".
								// Possible values are: "eq" (equal to), "neq" (not equal to),
								// "incl" (includes; for arrays), "excl" (excludes; for arrays),
								// "matches" (regex)
								operator?: "eq" | "neq" | "incl" | "excl" | "matches"

								// Reference to a named set of pattern expressions
								patternRef?: string
								predicate?:  string

								// Path selector to fetch content from the authorization JSON
								// (e.g. 'request.method').
								// Any pattern supported by
								// https://pkg.go.dev/github.com/tidwall/gjson can be used.
								// Authorino custom JSON path modifiers are also supported.
								selector?: string

								// The value of reference for the comparison with the content
								// fetched from the authorization JSON.
								// If used with the "matches" operator, the value must compile to
								// a valid Golang regex.
								value?: string
							}]

							// Authorino Festival Wristband token
							wristband?: {
								// Any claims to be added to the wristband token apart from the
								// standard JWT claims (iss, iat, exp) added by default.
								customClaims?: {
									[string]: {
										expression?: string

										// Simple path selector to fetch content from the authorization
										// JSON (e.g. 'request.method') or a string template with
										// variables that resolve to patterns (e.g. "Hello,
										// {auth.identity.name}!").
										// Any pattern supported by
										// https://pkg.go.dev/github.com/tidwall/gjson can be used.
										// The following Authorino custom modifiers are supported:
										// @extract:{sep:" ",pos:0}, @replace{old:"",new:""},
										// @case:upper|lower, @base64:encode|decode and @strip.
										selector?: string

										// Static value
										value?: _
									}
								}

								// The endpoint to the Authorino service that issues the wristband
								// (format: <scheme>://<host>:<port>/<realm>, where <realm> =
								// <namespace>/<authorino-auth-config-resource-name/wristband-config-name)
								issuer: string

								// Reference by name to Kubernetes secrets and corresponding
								// signing algorithms.
								// The secrets must contain a `key.pem` entry whose value is the
								// signing key formatted as PEM.
								signingKeyRefs: [...{
									// Algorithm to sign the wristband token using the signing key
									// provided
									algorithm: "ES256" | "ES384" | "ES512" | "RS256" | "RS384" | "RS512"

									// Name of the signing key.
									// The value is used to reference the Kubernetes secret that
									// stores the key and in the `kid` claim of the wristband token
									// header.
									name: string
								}]

								// Time span of the wristband token, in seconds.
								tokenDuration?: int
							}
						}
					}
				}

				// Customizations on the denial status attributes when the request
				// is unauthenticated.
				// For integration of Authorino via proxy, the proxy must honour
				// the response status attributes specified in this config.
				// Default: 401 Unauthorized
				unauthenticated?: {
					// HTTP response body to override the default denial body.
					body?: {
						expression?: string

						// Simple path selector to fetch content from the authorization
						// JSON (e.g. 'request.method') or a string template with
						// variables that resolve to patterns (e.g. "Hello,
						// {auth.identity.name}!").
						// Any pattern supported by
						// https://pkg.go.dev/github.com/tidwall/gjson can be used.
						// The following Authorino custom modifiers are supported:
						// @extract:{sep:" ",pos:0}, @replace{old:"",new:""},
						// @case:upper|lower, @base64:encode|decode and @strip.
						selector?: string

						// Static value
						value?: _
					}

					// HTTP status code to override the default denial status code.
					code?: uint & >=300 & <=599

					// HTTP response headers to override the default denial headers.
					headers?: {
						[string]: {
							expression?: string

							// Simple path selector to fetch content from the authorization
							// JSON (e.g. 'request.method') or a string template with
							// variables that resolve to patterns (e.g. "Hello,
							// {auth.identity.name}!").
							// Any pattern supported by
							// https://pkg.go.dev/github.com/tidwall/gjson can be used.
							// The following Authorino custom modifiers are supported:
							// @extract:{sep:" ",pos:0}, @replace{old:"",new:""},
							// @case:upper|lower, @base64:encode|decode and @strip.
							selector?: string

							// Static value
							value?: _
						}
					}

					// HTTP message to override the default denial message.
					message?: {
						expression?: string

						// Simple path selector to fetch content from the authorization
						// JSON (e.g. 'request.method') or a string template with
						// variables that resolve to patterns (e.g. "Hello,
						// {auth.identity.name}!").
						// Any pattern supported by
						// https://pkg.go.dev/github.com/tidwall/gjson can be used.
						// The following Authorino custom modifiers are supported:
						// @extract:{sep:" ",pos:0}, @replace{old:"",new:""},
						// @case:upper|lower, @base64:encode|decode and @strip.
						selector?: string

						// Static value
						value?: _
					}
				}

				// Customizations on the denial status attributes when the request
				// is unauthorized.
				// For integration of Authorino via proxy, the proxy must honour
				// the response status attributes specified in this config.
				// Default: 403 Forbidden
				unauthorized?: {
					// HTTP response body to override the default denial body.
					body?: {
						expression?: string

						// Simple path selector to fetch content from the authorization
						// JSON (e.g. 'request.method') or a string template with
						// variables that resolve to patterns (e.g. "Hello,
						// {auth.identity.name}!").
						// Any pattern supported by
						// https://pkg.go.dev/github.com/tidwall/gjson can be used.
						// The following Authorino custom modifiers are supported:
						// @extract:{sep:" ",pos:0}, @replace{old:"",new:""},
						// @case:upper|lower, @base64:encode|decode and @strip.
						selector?: string

						// Static value
						value?: _
					}

					// HTTP status code to override the default denial status code.
					code?: uint & >=300 & <=599

					// HTTP response headers to override the default denial headers.
					headers?: {
						[string]: {
							expression?: string

							// Simple path selector to fetch content from the authorization
							// JSON (e.g. 'request.method') or a string template with
							// variables that resolve to patterns (e.g. "Hello,
							// {auth.identity.name}!").
							// Any pattern supported by
							// https://pkg.go.dev/github.com/tidwall/gjson can be used.
							// The following Authorino custom modifiers are supported:
							// @extract:{sep:" ",pos:0}, @replace{old:"",new:""},
							// @case:upper|lower, @base64:encode|decode and @strip.
							selector?: string

							// Static value
							value?: _
						}
					}

					// HTTP message to override the default denial message.
					message?: {
						expression?: string

						// Simple path selector to fetch content from the authorization
						// JSON (e.g. 'request.method') or a string template with
						// variables that resolve to patterns (e.g. "Hello,
						// {auth.identity.name}!").
						// Any pattern supported by
						// https://pkg.go.dev/github.com/tidwall/gjson can be used.
						// The following Authorino custom modifiers are supported:
						// @extract:{sep:" ",pos:0}, @replace{old:"",new:""},
						// @case:upper|lower, @base64:encode|decode and @strip.
						selector?: string

						// Static value
						value?: _
					}
				}
			}
		}

		// Strategy defines the merge strategy to apply when merging this
		// policy with other policies.
		strategy?: "atomic" | "merge" | *"atomic"

		// Overall conditions for the policy to be enforced.
		// If omitted, the policy will be enforced at all requests to the
		// protected routes.
		// If present, all conditions must match for the policy to be
		// enforced.
		when?: [...{
			predicate: strings.MinRunes(1)
		}]
	}

	// Rules to apply as overrides. Override all policy rules lower in
	// the hierarchy. Can be overridden by less specific policy
	// overrides.
	// Use one of: defaults, overrides, or bare set of policy rules
	// (implicit defaults).
	overrides?: {
		// Named sets of patterns that can be referred in `when`
		// conditions and in pattern-matching authorization policy rules.
		patterns?: {
			[string]: {
				allOf: [...{
					// The binary operator to be applied to the content fetched from
					// the authorization JSON, for comparison with "value".
					// Possible values are: "eq" (equal to), "neq" (not equal to),
					// "incl" (includes; for arrays), "excl" (excludes; for arrays),
					// "matches" (regex)
					operator?: "eq" | "neq" | "incl" | "excl" | "matches"

					// Path selector to fetch content from the authorization JSON
					// (e.g. 'request.method').
					// Any pattern supported by
					// https://pkg.go.dev/github.com/tidwall/gjson can be used.
					// Authorino custom JSON path modifiers are also supported.
					selector?: string

					// The value of reference for the comparison with the content
					// fetched from the authorization JSON.
					// If used with the "matches" operator, the value must compile to
					// a valid Golang regex.
					value?: string
				}]
			}
		}

		// The auth rules of the policy.
		// See Authorino's AuthConfig CRD for more details.
		rules?: {
			// Authentication configs.
			// At least one config MUST evaluate to a valid identity object
			// for the auth request to be successful.
			authentication?: {
				[string]: {
					// Anonymous access.
					anonymous?: {}

					// Authentication based on API keys stored in Kubernetes secrets.
					apiKey?: {
						// Whether Authorino should look for API key secrets in all
						// namespaces or only in the same namespace as the AuthConfig.
						// Enabling this option in namespaced Authorino instances has no
						// effect.
						allNamespaces?: bool | *false

						// Label selector used by Authorino to match secrets from the
						// cluster storing valid credentials to authenticate to this
						// service
						selector: {
							// matchExpressions is a list of label selector requirements. The
							// requirements are ANDed.
							matchExpressions?: [...{
								// key is the label key that the selector applies to.
								key: string

								// operator represents a key's relationship to a set of values.
								// Valid operators are In, NotIn, Exists and DoesNotExist.
								operator: string

								// values is an array of string values. If the operator is In or
								// NotIn,
								// the values array must be non-empty. If the operator is Exists
								// or DoesNotExist,
								// the values array must be empty. This array is replaced during a
								// strategic
								// merge patch.
								values?: [...string]
							}]

							// matchLabels is a map of {key,value} pairs. A single {key,value}
							// in the matchLabels
							// map is equivalent to an element of matchExpressions, whose key
							// field is "key", the
							// operator is "In", and the values array contains only "value".
							// The requirements are ANDed.
							matchLabels?: {
								[string]: string
							}
						}
					}

					// Caching options for the resolved object returned when applying
					// this config.
					// Omit it to avoid caching objects for this config.
					cache?: {
						// Key used to store the entry in the cache.
						// The resolved key must be unique within the scope of this
						// particular config.
						key: {
							expression?: string

							// Simple path selector to fetch content from the authorization
							// JSON (e.g. 'request.method') or a string template with
							// variables that resolve to patterns (e.g. "Hello,
							// {auth.identity.name}!").
							// Any pattern supported by
							// https://pkg.go.dev/github.com/tidwall/gjson can be used.
							// The following Authorino custom modifiers are supported:
							// @extract:{sep:" ",pos:0}, @replace{old:"",new:""},
							// @case:upper|lower, @base64:encode|decode and @strip.
							selector?: string

							// Static value
							value?: _
						}

						// Duration (in seconds) of the external data in the cache before
						// pulled again from the source.
						ttl?: int | *60
					}

					// Defines where credentials are required to be passed in the
					// request for authentication based on this config.
					// If omitted, it defaults to credentials passed in the HTTP
					// Authorization header and the "Bearer" prefix prepended to the
					// secret credential value.
					credentials?: {
						authorizationHeader?: {
							prefix?: string
						}
						cookie?: {
							name: string
						}
						customHeader?: {
							name: string
						}
						queryString?: {
							name: string
						}
					}

					// Set default property values (claims) for the resolved identity
					// object, that are set before appending the object to
					// the authorization JSON. If the property is already present in
					// the resolved identity object, the default value is ignored.
					// It requires the resolved identity object to always be a JSON
					// object.
					// Do not use this option with identity objects of other JSON
					// types (array, string, etc).
					defaults?: {
						[string]: {
							expression?: string

							// Simple path selector to fetch content from the authorization
							// JSON (e.g. 'request.method') or a string template with
							// variables that resolve to patterns (e.g. "Hello,
							// {auth.identity.name}!").
							// Any pattern supported by
							// https://pkg.go.dev/github.com/tidwall/gjson can be used.
							// The following Authorino custom modifiers are supported:
							// @extract:{sep:" ",pos:0}, @replace{old:"",new:""},
							// @case:upper|lower, @base64:encode|decode and @strip.
							selector?: string

							// Static value
							value?: _
						}
					}

					// Authentication based on JWT tokens.
					jwt?: {
						// URL of the issuer of the JWT.
						// If `jwksUrl` is omitted, Authorino will append the path to the
						// OpenID Connect Well-Known Discovery endpoint
						// (i.e. "/.well-known/openid-configuration") to this URL, to
						// discover the OIDC configuration where to obtain
						// the "jkws_uri" claim from.
						// The value must coincide with the value of the "iss" (issuer)
						// claim of the discovered OpenID Connect configuration.
						issuerUrl?: string

						// Decides how long to wait before refreshing the JWKS (in
						// seconds).
						// If omitted, Authorino will never refresh the JWKS.
						ttl?: int
					}
					kubernetesTokenReview?: {
						// The list of audiences (scopes) that must be claimed in a
						// Kubernetes authentication token supplied in the request, and
						// reviewed by Authorino.
						// If omitted, Authorino will review tokens expecting the host
						// name of the requested protected service amongst the audiences.
						audiences?: [...string]
					}

					// Whether this config should generate individual observability
					// metrics
					metrics?: bool | *false

					// Authentication by OAuth2 token introspection.
					oauth2Introspection?: {
						credentialsRef: {
							// Name of the referent.
							// This field is effectively required, but due to backwards
							// compatibility is
							// allowed to be empty. Instances of this type with an empty value
							// here are
							// almost certainly wrong.
							// More info:
							// https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names
							name?: string | *""
						}

						// The full URL of the token introspection endpoint.
						endpoint: string

						// The token type hint for the token introspection.
						// If omitted, it defaults to "access_token".
						tokenTypeHint?: string
					}

					// Overrides the resolved identity object by setting the
					// additional properties (claims) specified in this config,
					// before appending the object to the authorization JSON.
					// It requires the resolved identity object to always be a JSON
					// object.
					// Do not use this option with identity objects of other JSON
					// types (array, string, etc).
					overrides?: {
						[string]: {
							expression?: string

							// Simple path selector to fetch content from the authorization
							// JSON (e.g. 'request.method') or a string template with
							// variables that resolve to patterns (e.g. "Hello,
							// {auth.identity.name}!").
							// Any pattern supported by
							// https://pkg.go.dev/github.com/tidwall/gjson can be used.
							// The following Authorino custom modifiers are supported:
							// @extract:{sep:" ",pos:0}, @replace{old:"",new:""},
							// @case:upper|lower, @base64:encode|decode and @strip.
							selector?: string

							// Static value
							value?: _
						}
					}

					// Identity object extracted from the context.
					// Use this method when authentication is performed beforehand by
					// a proxy and the resulting object passed to Authorino as JSON
					// in the auth request.
					plain?: {
						expression?: string

						// Simple path selector to fetch content from the authorization
						// JSON (e.g. 'request.method') or a string template with
						// variables that resolve to patterns (e.g. "Hello,
						// {auth.identity.name}!").
						// Any pattern supported by
						// https://pkg.go.dev/github.com/tidwall/gjson can be used.
						// The following Authorino custom modifiers are supported:
						// @extract:{sep:" ",pos:0}, @replace{old:"",new:""},
						// @case:upper|lower, @base64:encode|decode and @strip.
						selector?: string
					}

					// Priority group of the config.
					// All configs in the same priority group are evaluated
					// concurrently; consecutive priority groups are evaluated
					// sequentially.
					priority?: int | *0

					// Conditions for Authorino to enforce this config.
					// If omitted, the config will be enforced for all requests.
					// If present, all conditions must match for the config to be
					// enforced; otherwise, the config will be skipped.
					when?: [...{
						// A list of pattern expressions to be evaluated as a logical AND.
						all?: [...{}]

						// A list of pattern expressions to be evaluated as a logical OR.
						any?: [...{}]

						// The binary operator to be applied to the content fetched from
						// the authorization JSON, for comparison with "value".
						// Possible values are: "eq" (equal to), "neq" (not equal to),
						// "incl" (includes; for arrays), "excl" (excludes; for arrays),
						// "matches" (regex)
						operator?: "eq" | "neq" | "incl" | "excl" | "matches"

						// Reference to a named set of pattern expressions
						patternRef?: string
						predicate?:  string

						// Path selector to fetch content from the authorization JSON
						// (e.g. 'request.method').
						// Any pattern supported by
						// https://pkg.go.dev/github.com/tidwall/gjson can be used.
						// Authorino custom JSON path modifiers are also supported.
						selector?: string

						// The value of reference for the comparison with the content
						// fetched from the authorization JSON.
						// If used with the "matches" operator, the value must compile to
						// a valid Golang regex.
						value?: string
					}]

					// Authentication based on client X.509 certificates.
					// The certificates presented by the clients must be signed by a
					// trusted CA whose certificates are stored in Kubernetes
					// secrets.
					x509?: {
						// Whether Authorino should look for TLS secrets in all namespaces
						// or only in the same namespace as the AuthConfig.
						// Enabling this option in namespaced Authorino instances has no
						// effect.
						allNamespaces?: bool | *false

						// Label selector used by Authorino to match secrets from the
						// cluster storing trusted CA certificates to validate
						// clients trying to authenticate to this service
						selector: {
							// matchExpressions is a list of label selector requirements. The
							// requirements are ANDed.
							matchExpressions?: [...{
								// key is the label key that the selector applies to.
								key: string

								// operator represents a key's relationship to a set of values.
								// Valid operators are In, NotIn, Exists and DoesNotExist.
								operator: string

								// values is an array of string values. If the operator is In or
								// NotIn,
								// the values array must be non-empty. If the operator is Exists
								// or DoesNotExist,
								// the values array must be empty. This array is replaced during a
								// strategic
								// merge patch.
								values?: [...string]
							}]

							// matchLabels is a map of {key,value} pairs. A single {key,value}
							// in the matchLabels
							// map is equivalent to an element of matchExpressions, whose key
							// field is "key", the
							// operator is "In", and the values array contains only "value".
							// The requirements are ANDed.
							matchLabels?: {
								[string]: string
							}
						}
					}
				}
			}

			// Authorization policies.
			// All policies MUST evaluate to "allowed = true" for the auth
			// request be successful.
			authorization?: {
				[string]: {
					// Caching options for the resolved object returned when applying
					// this config.
					// Omit it to avoid caching objects for this config.
					cache?: {
						// Key used to store the entry in the cache.
						// The resolved key must be unique within the scope of this
						// particular config.
						key: {
							expression?: string

							// Simple path selector to fetch content from the authorization
							// JSON (e.g. 'request.method') or a string template with
							// variables that resolve to patterns (e.g. "Hello,
							// {auth.identity.name}!").
							// Any pattern supported by
							// https://pkg.go.dev/github.com/tidwall/gjson can be used.
							// The following Authorino custom modifiers are supported:
							// @extract:{sep:" ",pos:0}, @replace{old:"",new:""},
							// @case:upper|lower, @base64:encode|decode and @strip.
							selector?: string

							// Static value
							value?: _
						}

						// Duration (in seconds) of the external data in the cache before
						// pulled again from the source.
						ttl?: int | *60
					}

					// Authorization by Kubernetes SubjectAccessReview
					kubernetesSubjectAccessReview?: {
						// Groups the user must be a member of or, if `user` is omitted,
						// the groups to check for authorization in the Kubernetes RBAC.
						groups?: [...string]

						// Use resourceAttributes to check permissions on Kubernetes
						// resources.
						// If omitted, it performs a non-resource SubjectAccessReview,
						// with verb and path inferred from the request.
						resourceAttributes?: {
							// API group of the resource.
							// Use '*' for all API groups.
							group?: {
								expression?: string

								// Simple path selector to fetch content from the authorization
								// JSON (e.g. 'request.method') or a string template with
								// variables that resolve to patterns (e.g. "Hello,
								// {auth.identity.name}!").
								// Any pattern supported by
								// https://pkg.go.dev/github.com/tidwall/gjson can be used.
								// The following Authorino custom modifiers are supported:
								// @extract:{sep:" ",pos:0}, @replace{old:"",new:""},
								// @case:upper|lower, @base64:encode|decode and @strip.
								selector?: string

								// Static value
								value?: _
							}

							// Resource name
							// Omit it to check for authorization on all resources of the
							// specified kind.
							name?: {
								expression?: string

								// Simple path selector to fetch content from the authorization
								// JSON (e.g. 'request.method') or a string template with
								// variables that resolve to patterns (e.g. "Hello,
								// {auth.identity.name}!").
								// Any pattern supported by
								// https://pkg.go.dev/github.com/tidwall/gjson can be used.
								// The following Authorino custom modifiers are supported:
								// @extract:{sep:" ",pos:0}, @replace{old:"",new:""},
								// @case:upper|lower, @base64:encode|decode and @strip.
								selector?: string

								// Static value
								value?: _
							}

							// Namespace where the user must have permissions on the resource.
							namespace?: {
								expression?: string

								// Simple path selector to fetch content from the authorization
								// JSON (e.g. 'request.method') or a string template with
								// variables that resolve to patterns (e.g. "Hello,
								// {auth.identity.name}!").
								// Any pattern supported by
								// https://pkg.go.dev/github.com/tidwall/gjson can be used.
								// The following Authorino custom modifiers are supported:
								// @extract:{sep:" ",pos:0}, @replace{old:"",new:""},
								// @case:upper|lower, @base64:encode|decode and @strip.
								selector?: string

								// Static value
								value?: _
							}

							// Resource kind
							// Use '*' for all resource kinds.
							resource?: {
								expression?: string

								// Simple path selector to fetch content from the authorization
								// JSON (e.g. 'request.method') or a string template with
								// variables that resolve to patterns (e.g. "Hello,
								// {auth.identity.name}!").
								// Any pattern supported by
								// https://pkg.go.dev/github.com/tidwall/gjson can be used.
								// The following Authorino custom modifiers are supported:
								// @extract:{sep:" ",pos:0}, @replace{old:"",new:""},
								// @case:upper|lower, @base64:encode|decode and @strip.
								selector?: string

								// Static value
								value?: _
							}

							// Subresource kind
							subresource?: {
								expression?: string

								// Simple path selector to fetch content from the authorization
								// JSON (e.g. 'request.method') or a string template with
								// variables that resolve to patterns (e.g. "Hello,
								// {auth.identity.name}!").
								// Any pattern supported by
								// https://pkg.go.dev/github.com/tidwall/gjson can be used.
								// The following Authorino custom modifiers are supported:
								// @extract:{sep:" ",pos:0}, @replace{old:"",new:""},
								// @case:upper|lower, @base64:encode|decode and @strip.
								selector?: string

								// Static value
								value?: _
							}

							// Verb to check for authorization on the resource.
							// Use '*' for all verbs.
							verb?: {
								expression?: string

								// Simple path selector to fetch content from the authorization
								// JSON (e.g. 'request.method') or a string template with
								// variables that resolve to patterns (e.g. "Hello,
								// {auth.identity.name}!").
								// Any pattern supported by
								// https://pkg.go.dev/github.com/tidwall/gjson can be used.
								// The following Authorino custom modifiers are supported:
								// @extract:{sep:" ",pos:0}, @replace{old:"",new:""},
								// @case:upper|lower, @base64:encode|decode and @strip.
								selector?: string

								// Static value
								value?: _
							}
						}

						// User to check for authorization in the Kubernetes RBAC.
						// Omit it to check for group authorization only.
						user?: {
							expression?: string

							// Simple path selector to fetch content from the authorization
							// JSON (e.g. 'request.method') or a string template with
							// variables that resolve to patterns (e.g. "Hello,
							// {auth.identity.name}!").
							// Any pattern supported by
							// https://pkg.go.dev/github.com/tidwall/gjson can be used.
							// The following Authorino custom modifiers are supported:
							// @extract:{sep:" ",pos:0}, @replace{old:"",new:""},
							// @case:upper|lower, @base64:encode|decode and @strip.
							selector?: string

							// Static value
							value?: _
						}
					}

					// Whether this config should generate individual observability
					// metrics
					metrics?: bool | *false

					// Open Policy Agent (OPA) Rego policy.
					opa?: {
						// Returns the value of all Rego rules in the virtual document.
						// Values can be read in subsequent evaluators/phases of the Auth
						// Pipeline.
						// Otherwise, only the default `allow` rule will be exposed.
						// Returning all Rego rules can affect performance of OPA policies
						// during reconciliation (policy precompile) and at runtime.
						allValues?: bool | *false

						// Settings for fetching the OPA policy from an external registry.
						// Use it alternatively to 'rego'.
						// For the configurations of the HTTP request, the following
						// options are not implemented: 'method', 'body',
						// 'bodyParameters',
						// 'contentType', 'headers', 'oauth2'. Use it only with: 'url',
						// 'sharedSecret', 'credentials'.
						externalPolicy?: {
							// Raw body of the HTTP request.
							// Supersedes 'bodyParameters'; use either one or the other.
							// Use it with method=POST; for GET requests, set parameters as
							// query string in the 'endpoint' (placeholders can be used).
							body?: {
								expression?: string

								// Simple path selector to fetch content from the authorization
								// JSON (e.g. 'request.method') or a string template with
								// variables that resolve to patterns (e.g. "Hello,
								// {auth.identity.name}!").
								// Any pattern supported by
								// https://pkg.go.dev/github.com/tidwall/gjson can be used.
								// The following Authorino custom modifiers are supported:
								// @extract:{sep:" ",pos:0}, @replace{old:"",new:""},
								// @case:upper|lower, @base64:encode|decode and @strip.
								selector?: string

								// Static value
								value?: _
							}

							// Custom parameters to encode in the body of the HTTP request.
							// Superseded by 'body'; use either one or the other.
							// Use it with method=POST; for GET requests, set parameters as
							// query string in the 'endpoint' (placeholders can be used).
							bodyParameters?: {
								[string]: {
									expression?: string

									// Simple path selector to fetch content from the authorization
									// JSON (e.g. 'request.method') or a string template with
									// variables that resolve to patterns (e.g. "Hello,
									// {auth.identity.name}!").
									// Any pattern supported by
									// https://pkg.go.dev/github.com/tidwall/gjson can be used.
									// The following Authorino custom modifiers are supported:
									// @extract:{sep:" ",pos:0}, @replace{old:"",new:""},
									// @case:upper|lower, @base64:encode|decode and @strip.
									selector?: string

									// Static value
									value?: _
								}
							}

							// Content-Type of the request body. Shapes how 'bodyParameters'
							// are encoded.
							// Use it with method=POST; for GET requests, Content-Type is
							// automatically set to 'text/plain'.
							contentType?: "application/x-www-form-urlencoded" | "application/json" | *"application/x-www-form-urlencoded"

							// Defines where client credentials will be passed in the request
							// to the service.
							// If omitted, it defaults to client credentials passed in the
							// HTTP Authorization header and the "Bearer" prefix expected
							// prepended to the secret value.
							credentials?: {
								authorizationHeader?: {
									prefix?: string
								}
								cookie?: {
									name: string
								}
								customHeader?: {
									name: string
								}
								queryString?: {
									name: string
								}
							}

							// Custom headers in the HTTP request.
							headers?: {
								[string]: {
									expression?: string

									// Simple path selector to fetch content from the authorization
									// JSON (e.g. 'request.method') or a string template with
									// variables that resolve to patterns (e.g. "Hello,
									// {auth.identity.name}!").
									// Any pattern supported by
									// https://pkg.go.dev/github.com/tidwall/gjson can be used.
									// The following Authorino custom modifiers are supported:
									// @extract:{sep:" ",pos:0}, @replace{old:"",new:""},
									// @case:upper|lower, @base64:encode|decode and @strip.
									selector?: string

									// Static value
									value?: _
								}
							}

							// HTTP verb used in the request to the service. Accepted values:
							// GET (default), POST.
							// When the request method is POST, the authorization JSON is
							// passed in the body of the request.
							method?: "GET" | "POST" | "PUT" | "PATCH" | "DELETE" | "HEAD" | "OPTIONS" | "CONNECT" | "TRACE" | *"GET"

							// Authentication with the HTTP service by OAuth2 Client
							// Credentials grant.
							oauth2?: {
								// Caches and reuses the token until expired.
								// Set it to false to force fetch the token at every authorization
								// request regardless of expiration.
								cache?: bool | *true

								// OAuth2 Client ID.
								clientId: string

								// Reference to a Kuberentes Secret key that stores that OAuth2
								// Client Secret.
								clientSecretRef: {
									// The key of the secret to select from. Must be a valid secret
									// key.
									key: string

									// The name of the secret in the Authorino's namespace to select
									// from.
									name: string
								}

								// Optional extra parameters for the requests to the token URL.
								extraParams?: {
									[string]: string
								}

								// Optional scopes for the client credentials grant, if supported
								// by he OAuth2 server.
								scopes?: [...string]

								// Token endpoint URL of the OAuth2 resource server.
								tokenUrl: string
							}

							// Reference to a Secret key whose value will be passed by
							// Authorino in the request.
							// The HTTP service can use the shared secret to authenticate the
							// origin of the request.
							// Ignored if used together with oauth2.
							sharedSecretRef?: {
								// The key of the secret to select from. Must be a valid secret
								// key.
								key: string

								// The name of the secret in the Authorino's namespace to select
								// from.
								name: string
							}

							// Duration (in seconds) of the external data in the cache before
							// pulled again from the source.
							ttl?: int

							// Endpoint URL of the HTTP service.
							// The value can include variable placeholders in the format
							// "{selector}", where "selector" is any pattern supported
							// by https://pkg.go.dev/github.com/tidwall/gjson and selects
							// value from the authorization JSON.
							// E.g. https://ext-auth-server.io/metadata?p={request.path}
							url?:           string
							urlExpression?: string
						}

						// Authorization policy as a Rego language document.
						// The Rego document must include the "allow" condition, set by
						// Authorino to "false" by default (i.e. requests are
						// unauthorized unless changed).
						// The Rego document must NOT include the "package" declaration in
						// line 1.
						rego?: string
					}
					patternMatching?: {
						patterns: [...{
							// A list of pattern expressions to be evaluated as a logical AND.
							all?: [...{}]

							// A list of pattern expressions to be evaluated as a logical OR.
							any?: [...{}]

							// The binary operator to be applied to the content fetched from
							// the authorization JSON, for comparison with "value".
							// Possible values are: "eq" (equal to), "neq" (not equal to),
							// "incl" (includes; for arrays), "excl" (excludes; for arrays),
							// "matches" (regex)
							operator?: "eq" | "neq" | "incl" | "excl" | "matches"

							// Reference to a named set of pattern expressions
							patternRef?: string
							predicate?:  string

							// Path selector to fetch content from the authorization JSON
							// (e.g. 'request.method').
							// Any pattern supported by
							// https://pkg.go.dev/github.com/tidwall/gjson can be used.
							// Authorino custom JSON path modifiers are also supported.
							selector?: string

							// The value of reference for the comparison with the content
							// fetched from the authorization JSON.
							// If used with the "matches" operator, the value must compile to
							// a valid Golang regex.
							value?: string
						}]
					}

					// Priority group of the config.
					// All configs in the same priority group are evaluated
					// concurrently; consecutive priority groups are evaluated
					// sequentially.
					priority?: int | *0

					// Authorization decision delegated to external Authzed/SpiceDB
					// server.
					spicedb?: {
						// Hostname and port number to the GRPC interface of the SpiceDB
						// server (e.g. spicedb:50051).
						endpoint: string

						// Insecure HTTP connection (i.e. disables TLS verification)
						insecure?: bool

						// The name of the permission (or relation) on which to execute
						// the check.
						permission?: {
							expression?: string

							// Simple path selector to fetch content from the authorization
							// JSON (e.g. 'request.method') or a string template with
							// variables that resolve to patterns (e.g. "Hello,
							// {auth.identity.name}!").
							// Any pattern supported by
							// https://pkg.go.dev/github.com/tidwall/gjson can be used.
							// The following Authorino custom modifiers are supported:
							// @extract:{sep:" ",pos:0}, @replace{old:"",new:""},
							// @case:upper|lower, @base64:encode|decode and @strip.
							selector?: string

							// Static value
							value?: _
						}

						// The resource on which to check the permission or relation.
						resource?: {
							kind?: {
								expression?: string

								// Simple path selector to fetch content from the authorization
								// JSON (e.g. 'request.method') or a string template with
								// variables that resolve to patterns (e.g. "Hello,
								// {auth.identity.name}!").
								// Any pattern supported by
								// https://pkg.go.dev/github.com/tidwall/gjson can be used.
								// The following Authorino custom modifiers are supported:
								// @extract:{sep:" ",pos:0}, @replace{old:"",new:""},
								// @case:upper|lower, @base64:encode|decode and @strip.
								selector?: string

								// Static value
								value?: _
							}
							name?: {
								expression?: string

								// Simple path selector to fetch content from the authorization
								// JSON (e.g. 'request.method') or a string template with
								// variables that resolve to patterns (e.g. "Hello,
								// {auth.identity.name}!").
								// Any pattern supported by
								// https://pkg.go.dev/github.com/tidwall/gjson can be used.
								// The following Authorino custom modifiers are supported:
								// @extract:{sep:" ",pos:0}, @replace{old:"",new:""},
								// @case:upper|lower, @base64:encode|decode and @strip.
								selector?: string

								// Static value
								value?: _
							}
						}

						// Reference to a Secret key whose value will be used by Authorino
						// to authenticate with the Authzed service.
						sharedSecretRef?: {
							// The key of the secret to select from. Must be a valid secret
							// key.
							key: string

							// The name of the secret in the Authorino's namespace to select
							// from.
							name: string
						}

						// The subject that will be checked for the permission or
						// relation.
						subject?: {
							kind?: {
								expression?: string

								// Simple path selector to fetch content from the authorization
								// JSON (e.g. 'request.method') or a string template with
								// variables that resolve to patterns (e.g. "Hello,
								// {auth.identity.name}!").
								// Any pattern supported by
								// https://pkg.go.dev/github.com/tidwall/gjson can be used.
								// The following Authorino custom modifiers are supported:
								// @extract:{sep:" ",pos:0}, @replace{old:"",new:""},
								// @case:upper|lower, @base64:encode|decode and @strip.
								selector?: string

								// Static value
								value?: _
							}
							name?: {
								expression?: string

								// Simple path selector to fetch content from the authorization
								// JSON (e.g. 'request.method') or a string template with
								// variables that resolve to patterns (e.g. "Hello,
								// {auth.identity.name}!").
								// Any pattern supported by
								// https://pkg.go.dev/github.com/tidwall/gjson can be used.
								// The following Authorino custom modifiers are supported:
								// @extract:{sep:" ",pos:0}, @replace{old:"",new:""},
								// @case:upper|lower, @base64:encode|decode and @strip.
								selector?: string

								// Static value
								value?: _
							}
						}
					}

					// Conditions for Authorino to enforce this config.
					// If omitted, the config will be enforced for all requests.
					// If present, all conditions must match for the config to be
					// enforced; otherwise, the config will be skipped.
					when?: [...{
						// A list of pattern expressions to be evaluated as a logical AND.
						all?: [...{}]

						// A list of pattern expressions to be evaluated as a logical OR.
						any?: [...{}]

						// The binary operator to be applied to the content fetched from
						// the authorization JSON, for comparison with "value".
						// Possible values are: "eq" (equal to), "neq" (not equal to),
						// "incl" (includes; for arrays), "excl" (excludes; for arrays),
						// "matches" (regex)
						operator?: "eq" | "neq" | "incl" | "excl" | "matches"

						// Reference to a named set of pattern expressions
						patternRef?: string
						predicate?:  string

						// Path selector to fetch content from the authorization JSON
						// (e.g. 'request.method').
						// Any pattern supported by
						// https://pkg.go.dev/github.com/tidwall/gjson can be used.
						// Authorino custom JSON path modifiers are also supported.
						selector?: string

						// The value of reference for the comparison with the content
						// fetched from the authorization JSON.
						// If used with the "matches" operator, the value must compile to
						// a valid Golang regex.
						value?: string
					}]
				}
			}

			// Callback functions.
			// Authorino sends callbacks at the end of the auth pipeline to
			// the endpoints specified in this config.
			callbacks?: {
				[string]: {
					// Caching options for the resolved object returned when applying
					// this config.
					// Omit it to avoid caching objects for this config.
					cache?: {
						// Key used to store the entry in the cache.
						// The resolved key must be unique within the scope of this
						// particular config.
						key: {
							expression?: string

							// Simple path selector to fetch content from the authorization
							// JSON (e.g. 'request.method') or a string template with
							// variables that resolve to patterns (e.g. "Hello,
							// {auth.identity.name}!").
							// Any pattern supported by
							// https://pkg.go.dev/github.com/tidwall/gjson can be used.
							// The following Authorino custom modifiers are supported:
							// @extract:{sep:" ",pos:0}, @replace{old:"",new:""},
							// @case:upper|lower, @base64:encode|decode and @strip.
							selector?: string

							// Static value
							value?: _
						}

						// Duration (in seconds) of the external data in the cache before
						// pulled again from the source.
						ttl?: int | *60
					}

					// Settings of the external HTTP request
					http: {
						// Raw body of the HTTP request.
						// Supersedes 'bodyParameters'; use either one or the other.
						// Use it with method=POST; for GET requests, set parameters as
						// query string in the 'endpoint' (placeholders can be used).
						body?: {
							expression?: string

							// Simple path selector to fetch content from the authorization
							// JSON (e.g. 'request.method') or a string template with
							// variables that resolve to patterns (e.g. "Hello,
							// {auth.identity.name}!").
							// Any pattern supported by
							// https://pkg.go.dev/github.com/tidwall/gjson can be used.
							// The following Authorino custom modifiers are supported:
							// @extract:{sep:" ",pos:0}, @replace{old:"",new:""},
							// @case:upper|lower, @base64:encode|decode and @strip.
							selector?: string

							// Static value
							value?: _
						}

						// Custom parameters to encode in the body of the HTTP request.
						// Superseded by 'body'; use either one or the other.
						// Use it with method=POST; for GET requests, set parameters as
						// query string in the 'endpoint' (placeholders can be used).
						bodyParameters?: {
							[string]: {
								expression?: string

								// Simple path selector to fetch content from the authorization
								// JSON (e.g. 'request.method') or a string template with
								// variables that resolve to patterns (e.g. "Hello,
								// {auth.identity.name}!").
								// Any pattern supported by
								// https://pkg.go.dev/github.com/tidwall/gjson can be used.
								// The following Authorino custom modifiers are supported:
								// @extract:{sep:" ",pos:0}, @replace{old:"",new:""},
								// @case:upper|lower, @base64:encode|decode and @strip.
								selector?: string

								// Static value
								value?: _
							}
						}

						// Content-Type of the request body. Shapes how 'bodyParameters'
						// are encoded.
						// Use it with method=POST; for GET requests, Content-Type is
						// automatically set to 'text/plain'.
						contentType?: "application/x-www-form-urlencoded" | "application/json" | *"application/x-www-form-urlencoded"

						// Defines where client credentials will be passed in the request
						// to the service.
						// If omitted, it defaults to client credentials passed in the
						// HTTP Authorization header and the "Bearer" prefix expected
						// prepended to the secret value.
						credentials?: {
							authorizationHeader?: {
								prefix?: string
							}
							cookie?: {
								name: string
							}
							customHeader?: {
								name: string
							}
							queryString?: {
								name: string
							}
						}

						// Custom headers in the HTTP request.
						headers?: {
							[string]: {
								expression?: string

								// Simple path selector to fetch content from the authorization
								// JSON (e.g. 'request.method') or a string template with
								// variables that resolve to patterns (e.g. "Hello,
								// {auth.identity.name}!").
								// Any pattern supported by
								// https://pkg.go.dev/github.com/tidwall/gjson can be used.
								// The following Authorino custom modifiers are supported:
								// @extract:{sep:" ",pos:0}, @replace{old:"",new:""},
								// @case:upper|lower, @base64:encode|decode and @strip.
								selector?: string

								// Static value
								value?: _
							}
						}

						// HTTP verb used in the request to the service. Accepted values:
						// GET (default), POST.
						// When the request method is POST, the authorization JSON is
						// passed in the body of the request.
						method?: "GET" | "POST" | "PUT" | "PATCH" | "DELETE" | "HEAD" | "OPTIONS" | "CONNECT" | "TRACE" | *"GET"

						// Authentication with the HTTP service by OAuth2 Client
						// Credentials grant.
						oauth2?: {
							// Caches and reuses the token until expired.
							// Set it to false to force fetch the token at every authorization
							// request regardless of expiration.
							cache?: bool | *true

							// OAuth2 Client ID.
							clientId: string

							// Reference to a Kuberentes Secret key that stores that OAuth2
							// Client Secret.
							clientSecretRef: {
								// The key of the secret to select from. Must be a valid secret
								// key.
								key: string

								// The name of the secret in the Authorino's namespace to select
								// from.
								name: string
							}

							// Optional extra parameters for the requests to the token URL.
							extraParams?: {
								[string]: string
							}

							// Optional scopes for the client credentials grant, if supported
							// by he OAuth2 server.
							scopes?: [...string]

							// Token endpoint URL of the OAuth2 resource server.
							tokenUrl: string
						}

						// Reference to a Secret key whose value will be passed by
						// Authorino in the request.
						// The HTTP service can use the shared secret to authenticate the
						// origin of the request.
						// Ignored if used together with oauth2.
						sharedSecretRef?: {
							// The key of the secret to select from. Must be a valid secret
							// key.
							key: string

							// The name of the secret in the Authorino's namespace to select
							// from.
							name: string
						}

						// Endpoint URL of the HTTP service.
						// The value can include variable placeholders in the format
						// "{selector}", where "selector" is any pattern supported
						// by https://pkg.go.dev/github.com/tidwall/gjson and selects
						// value from the authorization JSON.
						// E.g. https://ext-auth-server.io/metadata?p={request.path}
						url?:           string
						urlExpression?: string
					}

					// Whether this config should generate individual observability
					// metrics
					metrics?: bool | *false

					// Priority group of the config.
					// All configs in the same priority group are evaluated
					// concurrently; consecutive priority groups are evaluated
					// sequentially.
					priority?: int | *0

					// Conditions for Authorino to enforce this config.
					// If omitted, the config will be enforced for all requests.
					// If present, all conditions must match for the config to be
					// enforced; otherwise, the config will be skipped.
					when?: [...{
						// A list of pattern expressions to be evaluated as a logical AND.
						all?: [...{}]

						// A list of pattern expressions to be evaluated as a logical OR.
						any?: [...{}]

						// The binary operator to be applied to the content fetched from
						// the authorization JSON, for comparison with "value".
						// Possible values are: "eq" (equal to), "neq" (not equal to),
						// "incl" (includes; for arrays), "excl" (excludes; for arrays),
						// "matches" (regex)
						operator?: "eq" | "neq" | "incl" | "excl" | "matches"

						// Reference to a named set of pattern expressions
						patternRef?: string
						predicate?:  string

						// Path selector to fetch content from the authorization JSON
						// (e.g. 'request.method').
						// Any pattern supported by
						// https://pkg.go.dev/github.com/tidwall/gjson can be used.
						// Authorino custom JSON path modifiers are also supported.
						selector?: string

						// The value of reference for the comparison with the content
						// fetched from the authorization JSON.
						// If used with the "matches" operator, the value must compile to
						// a valid Golang regex.
						value?: string
					}]
				}
			}

			// Metadata sources.
			// Authorino fetches auth metadata as JSON from sources specified
			// in this config.
			metadata?: {
				[string]: {
					// Caching options for the resolved object returned when applying
					// this config.
					// Omit it to avoid caching objects for this config.
					cache?: {
						// Key used to store the entry in the cache.
						// The resolved key must be unique within the scope of this
						// particular config.
						key: {
							expression?: string

							// Simple path selector to fetch content from the authorization
							// JSON (e.g. 'request.method') or a string template with
							// variables that resolve to patterns (e.g. "Hello,
							// {auth.identity.name}!").
							// Any pattern supported by
							// https://pkg.go.dev/github.com/tidwall/gjson can be used.
							// The following Authorino custom modifiers are supported:
							// @extract:{sep:" ",pos:0}, @replace{old:"",new:""},
							// @case:upper|lower, @base64:encode|decode and @strip.
							selector?: string

							// Static value
							value?: _
						}

						// Duration (in seconds) of the external data in the cache before
						// pulled again from the source.
						ttl?: int | *60
					}

					// External source of auth metadata via HTTP request
					http?: {
						// Raw body of the HTTP request.
						// Supersedes 'bodyParameters'; use either one or the other.
						// Use it with method=POST; for GET requests, set parameters as
						// query string in the 'endpoint' (placeholders can be used).
						body?: {
							expression?: string

							// Simple path selector to fetch content from the authorization
							// JSON (e.g. 'request.method') or a string template with
							// variables that resolve to patterns (e.g. "Hello,
							// {auth.identity.name}!").
							// Any pattern supported by
							// https://pkg.go.dev/github.com/tidwall/gjson can be used.
							// The following Authorino custom modifiers are supported:
							// @extract:{sep:" ",pos:0}, @replace{old:"",new:""},
							// @case:upper|lower, @base64:encode|decode and @strip.
							selector?: string

							// Static value
							value?: _
						}

						// Custom parameters to encode in the body of the HTTP request.
						// Superseded by 'body'; use either one or the other.
						// Use it with method=POST; for GET requests, set parameters as
						// query string in the 'endpoint' (placeholders can be used).
						bodyParameters?: {
							[string]: {
								expression?: string

								// Simple path selector to fetch content from the authorization
								// JSON (e.g. 'request.method') or a string template with
								// variables that resolve to patterns (e.g. "Hello,
								// {auth.identity.name}!").
								// Any pattern supported by
								// https://pkg.go.dev/github.com/tidwall/gjson can be used.
								// The following Authorino custom modifiers are supported:
								// @extract:{sep:" ",pos:0}, @replace{old:"",new:""},
								// @case:upper|lower, @base64:encode|decode and @strip.
								selector?: string

								// Static value
								value?: _
							}
						}

						// Content-Type of the request body. Shapes how 'bodyParameters'
						// are encoded.
						// Use it with method=POST; for GET requests, Content-Type is
						// automatically set to 'text/plain'.
						contentType?: "application/x-www-form-urlencoded" | "application/json" | *"application/x-www-form-urlencoded"

						// Defines where client credentials will be passed in the request
						// to the service.
						// If omitted, it defaults to client credentials passed in the
						// HTTP Authorization header and the "Bearer" prefix expected
						// prepended to the secret value.
						credentials?: {
							authorizationHeader?: {
								prefix?: string
							}
							cookie?: {
								name: string
							}
							customHeader?: {
								name: string
							}
							queryString?: {
								name: string
							}
						}

						// Custom headers in the HTTP request.
						headers?: {
							[string]: {
								expression?: string

								// Simple path selector to fetch content from the authorization
								// JSON (e.g. 'request.method') or a string template with
								// variables that resolve to patterns (e.g. "Hello,
								// {auth.identity.name}!").
								// Any pattern supported by
								// https://pkg.go.dev/github.com/tidwall/gjson can be used.
								// The following Authorino custom modifiers are supported:
								// @extract:{sep:" ",pos:0}, @replace{old:"",new:""},
								// @case:upper|lower, @base64:encode|decode and @strip.
								selector?: string

								// Static value
								value?: _
							}
						}

						// HTTP verb used in the request to the service. Accepted values:
						// GET (default), POST.
						// When the request method is POST, the authorization JSON is
						// passed in the body of the request.
						method?: "GET" | "POST" | "PUT" | "PATCH" | "DELETE" | "HEAD" | "OPTIONS" | "CONNECT" | "TRACE" | *"GET"

						// Authentication with the HTTP service by OAuth2 Client
						// Credentials grant.
						oauth2?: {
							// Caches and reuses the token until expired.
							// Set it to false to force fetch the token at every authorization
							// request regardless of expiration.
							cache?: bool | *true

							// OAuth2 Client ID.
							clientId: string

							// Reference to a Kuberentes Secret key that stores that OAuth2
							// Client Secret.
							clientSecretRef: {
								// The key of the secret to select from. Must be a valid secret
								// key.
								key: string

								// The name of the secret in the Authorino's namespace to select
								// from.
								name: string
							}

							// Optional extra parameters for the requests to the token URL.
							extraParams?: {
								[string]: string
							}

							// Optional scopes for the client credentials grant, if supported
							// by he OAuth2 server.
							scopes?: [...string]

							// Token endpoint URL of the OAuth2 resource server.
							tokenUrl: string
						}

						// Reference to a Secret key whose value will be passed by
						// Authorino in the request.
						// The HTTP service can use the shared secret to authenticate the
						// origin of the request.
						// Ignored if used together with oauth2.
						sharedSecretRef?: {
							// The key of the secret to select from. Must be a valid secret
							// key.
							key: string

							// The name of the secret in the Authorino's namespace to select
							// from.
							name: string
						}

						// Endpoint URL of the HTTP service.
						// The value can include variable placeholders in the format
						// "{selector}", where "selector" is any pattern supported
						// by https://pkg.go.dev/github.com/tidwall/gjson and selects
						// value from the authorization JSON.
						// E.g. https://ext-auth-server.io/metadata?p={request.path}
						url?:           string
						urlExpression?: string
					}

					// Whether this config should generate individual observability
					// metrics
					metrics?: bool | *false

					// Priority group of the config.
					// All configs in the same priority group are evaluated
					// concurrently; consecutive priority groups are evaluated
					// sequentially.
					priority?: int | *0

					// User-Managed Access (UMA) source of resource data.
					uma?: {
						credentialsRef: {
							// Name of the referent.
							// This field is effectively required, but due to backwards
							// compatibility is
							// allowed to be empty. Instances of this type with an empty value
							// here are
							// almost certainly wrong.
							// More info:
							// https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names
							name?: string | *""
						}

						// The endpoint of the UMA server.
						// The value must coincide with the "issuer" claim of the UMA
						// config discovered from the well-known uma configuration
						// endpoint.
						endpoint: string
					}
					userInfo?: {
						// The name of an OIDC-enabled JWT authentication config whose
						// OpenID Connect configuration discovered includes the OIDC
						// "userinfo_endpoint" claim.
						identitySource: string
					}

					// Conditions for Authorino to enforce this config.
					// If omitted, the config will be enforced for all requests.
					// If present, all conditions must match for the config to be
					// enforced; otherwise, the config will be skipped.
					when?: [...{
						// A list of pattern expressions to be evaluated as a logical AND.
						all?: [...{}]

						// A list of pattern expressions to be evaluated as a logical OR.
						any?: [...{}]

						// The binary operator to be applied to the content fetched from
						// the authorization JSON, for comparison with "value".
						// Possible values are: "eq" (equal to), "neq" (not equal to),
						// "incl" (includes; for arrays), "excl" (excludes; for arrays),
						// "matches" (regex)
						operator?: "eq" | "neq" | "incl" | "excl" | "matches"

						// Reference to a named set of pattern expressions
						patternRef?: string
						predicate?:  string

						// Path selector to fetch content from the authorization JSON
						// (e.g. 'request.method').
						// Any pattern supported by
						// https://pkg.go.dev/github.com/tidwall/gjson can be used.
						// Authorino custom JSON path modifiers are also supported.
						selector?: string

						// The value of reference for the comparison with the content
						// fetched from the authorization JSON.
						// If used with the "matches" operator, the value must compile to
						// a valid Golang regex.
						value?: string
					}]
				}
			}

			// Response items.
			// Authorino builds custom responses to the client of the auth
			// request.
			response?: {
				// Response items to be included in the auth response when the
				// request is authenticated and authorized.
				// For integration of Authorino via proxy, the proxy must use
				// these settings to propagate dynamic metadata and/or inject
				// data in the request.
				success?: {
					// Custom data made available to other filters managed by Kuadrant
					// (i.e. Rate Limit)
					filters?: {
						[string]: {
							// Caching options for the resolved object returned when applying
							// this config.
							// Omit it to avoid caching objects for this config.
							cache?: {
								// Key used to store the entry in the cache.
								// The resolved key must be unique within the scope of this
								// particular config.
								key: {
									expression?: string

									// Simple path selector to fetch content from the authorization
									// JSON (e.g. 'request.method') or a string template with
									// variables that resolve to patterns (e.g. "Hello,
									// {auth.identity.name}!").
									// Any pattern supported by
									// https://pkg.go.dev/github.com/tidwall/gjson can be used.
									// The following Authorino custom modifiers are supported:
									// @extract:{sep:" ",pos:0}, @replace{old:"",new:""},
									// @case:upper|lower, @base64:encode|decode and @strip.
									selector?: string

									// Static value
									value?: _
								}

								// Duration (in seconds) of the external data in the cache before
								// pulled again from the source.
								ttl?: int | *60
							}
							json?: {
								properties: {
									[string]: {
										expression?: string

										// Simple path selector to fetch content from the authorization
										// JSON (e.g. 'request.method') or a string template with
										// variables that resolve to patterns (e.g. "Hello,
										// {auth.identity.name}!").
										// Any pattern supported by
										// https://pkg.go.dev/github.com/tidwall/gjson can be used.
										// The following Authorino custom modifiers are supported:
										// @extract:{sep:" ",pos:0}, @replace{old:"",new:""},
										// @case:upper|lower, @base64:encode|decode and @strip.
										selector?: string

										// Static value
										value?: _
									}
								}
							}

							// The key used to add the custom response item (name of the HTTP
							// header or root property of the Dynamic Metadata object).
							// If omitted, it will be set to the name of the response config.
							key?: string

							// Whether this config should generate individual observability
							// metrics
							metrics?: bool | *false

							// Plain text content
							plain?: {
								expression?: string

								// Simple path selector to fetch content from the authorization
								// JSON (e.g. 'request.method') or a string template with
								// variables that resolve to patterns (e.g. "Hello,
								// {auth.identity.name}!").
								// Any pattern supported by
								// https://pkg.go.dev/github.com/tidwall/gjson can be used.
								// The following Authorino custom modifiers are supported:
								// @extract:{sep:" ",pos:0}, @replace{old:"",new:""},
								// @case:upper|lower, @base64:encode|decode and @strip.
								selector?: string

								// Static value
								value?: _
							}

							// Priority group of the config.
							// All configs in the same priority group are evaluated
							// concurrently; consecutive priority groups are evaluated
							// sequentially.
							priority?: int | *0

							// Conditions for Authorino to enforce this config.
							// If omitted, the config will be enforced for all requests.
							// If present, all conditions must match for the config to be
							// enforced; otherwise, the config will be skipped.
							when?: [...{
								// A list of pattern expressions to be evaluated as a logical AND.
								all?: [...{}]

								// A list of pattern expressions to be evaluated as a logical OR.
								any?: [...{}]

								// The binary operator to be applied to the content fetched from
								// the authorization JSON, for comparison with "value".
								// Possible values are: "eq" (equal to), "neq" (not equal to),
								// "incl" (includes; for arrays), "excl" (excludes; for arrays),
								// "matches" (regex)
								operator?: "eq" | "neq" | "incl" | "excl" | "matches"

								// Reference to a named set of pattern expressions
								patternRef?: string
								predicate?:  string

								// Path selector to fetch content from the authorization JSON
								// (e.g. 'request.method').
								// Any pattern supported by
								// https://pkg.go.dev/github.com/tidwall/gjson can be used.
								// Authorino custom JSON path modifiers are also supported.
								selector?: string

								// The value of reference for the comparison with the content
								// fetched from the authorization JSON.
								// If used with the "matches" operator, the value must compile to
								// a valid Golang regex.
								value?: string
							}]

							// Authorino Festival Wristband token
							wristband?: {
								// Any claims to be added to the wristband token apart from the
								// standard JWT claims (iss, iat, exp) added by default.
								customClaims?: {
									[string]: {
										expression?: string

										// Simple path selector to fetch content from the authorization
										// JSON (e.g. 'request.method') or a string template with
										// variables that resolve to patterns (e.g. "Hello,
										// {auth.identity.name}!").
										// Any pattern supported by
										// https://pkg.go.dev/github.com/tidwall/gjson can be used.
										// The following Authorino custom modifiers are supported:
										// @extract:{sep:" ",pos:0}, @replace{old:"",new:""},
										// @case:upper|lower, @base64:encode|decode and @strip.
										selector?: string

										// Static value
										value?: _
									}
								}

								// The endpoint to the Authorino service that issues the wristband
								// (format: <scheme>://<host>:<port>/<realm>, where <realm> =
								// <namespace>/<authorino-auth-config-resource-name/wristband-config-name)
								issuer: string

								// Reference by name to Kubernetes secrets and corresponding
								// signing algorithms.
								// The secrets must contain a `key.pem` entry whose value is the
								// signing key formatted as PEM.
								signingKeyRefs: [...{
									// Algorithm to sign the wristband token using the signing key
									// provided
									algorithm: "ES256" | "ES384" | "ES512" | "RS256" | "RS384" | "RS512"

									// Name of the signing key.
									// The value is used to reference the Kubernetes secret that
									// stores the key and in the `kid` claim of the wristband token
									// header.
									name: string
								}]

								// Time span of the wristband token, in seconds.
								tokenDuration?: int
							}
						}
					}

					// Custom headers to inject in the request.
					headers?: {
						[string]: {
							// Caching options for the resolved object returned when applying
							// this config.
							// Omit it to avoid caching objects for this config.
							cache?: {
								// Key used to store the entry in the cache.
								// The resolved key must be unique within the scope of this
								// particular config.
								key: {
									expression?: string

									// Simple path selector to fetch content from the authorization
									// JSON (e.g. 'request.method') or a string template with
									// variables that resolve to patterns (e.g. "Hello,
									// {auth.identity.name}!").
									// Any pattern supported by
									// https://pkg.go.dev/github.com/tidwall/gjson can be used.
									// The following Authorino custom modifiers are supported:
									// @extract:{sep:" ",pos:0}, @replace{old:"",new:""},
									// @case:upper|lower, @base64:encode|decode and @strip.
									selector?: string

									// Static value
									value?: _
								}

								// Duration (in seconds) of the external data in the cache before
								// pulled again from the source.
								ttl?: int | *60
							}
							json?: {
								properties: {
									[string]: {
										expression?: string

										// Simple path selector to fetch content from the authorization
										// JSON (e.g. 'request.method') or a string template with
										// variables that resolve to patterns (e.g. "Hello,
										// {auth.identity.name}!").
										// Any pattern supported by
										// https://pkg.go.dev/github.com/tidwall/gjson can be used.
										// The following Authorino custom modifiers are supported:
										// @extract:{sep:" ",pos:0}, @replace{old:"",new:""},
										// @case:upper|lower, @base64:encode|decode and @strip.
										selector?: string

										// Static value
										value?: _
									}
								}
							}

							// The key used to add the custom response item (name of the HTTP
							// header or root property of the Dynamic Metadata object).
							// If omitted, it will be set to the name of the response config.
							key?: string

							// Whether this config should generate individual observability
							// metrics
							metrics?: bool | *false

							// Plain text content
							plain?: {
								expression?: string

								// Simple path selector to fetch content from the authorization
								// JSON (e.g. 'request.method') or a string template with
								// variables that resolve to patterns (e.g. "Hello,
								// {auth.identity.name}!").
								// Any pattern supported by
								// https://pkg.go.dev/github.com/tidwall/gjson can be used.
								// The following Authorino custom modifiers are supported:
								// @extract:{sep:" ",pos:0}, @replace{old:"",new:""},
								// @case:upper|lower, @base64:encode|decode and @strip.
								selector?: string

								// Static value
								value?: _
							}

							// Priority group of the config.
							// All configs in the same priority group are evaluated
							// concurrently; consecutive priority groups are evaluated
							// sequentially.
							priority?: int | *0

							// Conditions for Authorino to enforce this config.
							// If omitted, the config will be enforced for all requests.
							// If present, all conditions must match for the config to be
							// enforced; otherwise, the config will be skipped.
							when?: [...{
								// A list of pattern expressions to be evaluated as a logical AND.
								all?: [...{}]

								// A list of pattern expressions to be evaluated as a logical OR.
								any?: [...{}]

								// The binary operator to be applied to the content fetched from
								// the authorization JSON, for comparison with "value".
								// Possible values are: "eq" (equal to), "neq" (not equal to),
								// "incl" (includes; for arrays), "excl" (excludes; for arrays),
								// "matches" (regex)
								operator?: "eq" | "neq" | "incl" | "excl" | "matches"

								// Reference to a named set of pattern expressions
								patternRef?: string
								predicate?:  string

								// Path selector to fetch content from the authorization JSON
								// (e.g. 'request.method').
								// Any pattern supported by
								// https://pkg.go.dev/github.com/tidwall/gjson can be used.
								// Authorino custom JSON path modifiers are also supported.
								selector?: string

								// The value of reference for the comparison with the content
								// fetched from the authorization JSON.
								// If used with the "matches" operator, the value must compile to
								// a valid Golang regex.
								value?: string
							}]

							// Authorino Festival Wristband token
							wristband?: {
								// Any claims to be added to the wristband token apart from the
								// standard JWT claims (iss, iat, exp) added by default.
								customClaims?: {
									[string]: {
										expression?: string

										// Simple path selector to fetch content from the authorization
										// JSON (e.g. 'request.method') or a string template with
										// variables that resolve to patterns (e.g. "Hello,
										// {auth.identity.name}!").
										// Any pattern supported by
										// https://pkg.go.dev/github.com/tidwall/gjson can be used.
										// The following Authorino custom modifiers are supported:
										// @extract:{sep:" ",pos:0}, @replace{old:"",new:""},
										// @case:upper|lower, @base64:encode|decode and @strip.
										selector?: string

										// Static value
										value?: _
									}
								}

								// The endpoint to the Authorino service that issues the wristband
								// (format: <scheme>://<host>:<port>/<realm>, where <realm> =
								// <namespace>/<authorino-auth-config-resource-name/wristband-config-name)
								issuer: string

								// Reference by name to Kubernetes secrets and corresponding
								// signing algorithms.
								// The secrets must contain a `key.pem` entry whose value is the
								// signing key formatted as PEM.
								signingKeyRefs: [...{
									// Algorithm to sign the wristband token using the signing key
									// provided
									algorithm: "ES256" | "ES384" | "ES512" | "RS256" | "RS384" | "RS512"

									// Name of the signing key.
									// The value is used to reference the Kubernetes secret that
									// stores the key and in the `kid` claim of the wristband token
									// header.
									name: string
								}]

								// Time span of the wristband token, in seconds.
								tokenDuration?: int
							}
						}
					}
				}

				// Customizations on the denial status attributes when the request
				// is unauthenticated.
				// For integration of Authorino via proxy, the proxy must honour
				// the response status attributes specified in this config.
				// Default: 401 Unauthorized
				unauthenticated?: {
					// HTTP response body to override the default denial body.
					body?: {
						expression?: string

						// Simple path selector to fetch content from the authorization
						// JSON (e.g. 'request.method') or a string template with
						// variables that resolve to patterns (e.g. "Hello,
						// {auth.identity.name}!").
						// Any pattern supported by
						// https://pkg.go.dev/github.com/tidwall/gjson can be used.
						// The following Authorino custom modifiers are supported:
						// @extract:{sep:" ",pos:0}, @replace{old:"",new:""},
						// @case:upper|lower, @base64:encode|decode and @strip.
						selector?: string

						// Static value
						value?: _
					}

					// HTTP status code to override the default denial status code.
					code?: uint & >=300 & <=599

					// HTTP response headers to override the default denial headers.
					headers?: {
						[string]: {
							expression?: string

							// Simple path selector to fetch content from the authorization
							// JSON (e.g. 'request.method') or a string template with
							// variables that resolve to patterns (e.g. "Hello,
							// {auth.identity.name}!").
							// Any pattern supported by
							// https://pkg.go.dev/github.com/tidwall/gjson can be used.
							// The following Authorino custom modifiers are supported:
							// @extract:{sep:" ",pos:0}, @replace{old:"",new:""},
							// @case:upper|lower, @base64:encode|decode and @strip.
							selector?: string

							// Static value
							value?: _
						}
					}

					// HTTP message to override the default denial message.
					message?: {
						expression?: string

						// Simple path selector to fetch content from the authorization
						// JSON (e.g. 'request.method') or a string template with
						// variables that resolve to patterns (e.g. "Hello,
						// {auth.identity.name}!").
						// Any pattern supported by
						// https://pkg.go.dev/github.com/tidwall/gjson can be used.
						// The following Authorino custom modifiers are supported:
						// @extract:{sep:" ",pos:0}, @replace{old:"",new:""},
						// @case:upper|lower, @base64:encode|decode and @strip.
						selector?: string

						// Static value
						value?: _
					}
				}

				// Customizations on the denial status attributes when the request
				// is unauthorized.
				// For integration of Authorino via proxy, the proxy must honour
				// the response status attributes specified in this config.
				// Default: 403 Forbidden
				unauthorized?: {
					// HTTP response body to override the default denial body.
					body?: {
						expression?: string

						// Simple path selector to fetch content from the authorization
						// JSON (e.g. 'request.method') or a string template with
						// variables that resolve to patterns (e.g. "Hello,
						// {auth.identity.name}!").
						// Any pattern supported by
						// https://pkg.go.dev/github.com/tidwall/gjson can be used.
						// The following Authorino custom modifiers are supported:
						// @extract:{sep:" ",pos:0}, @replace{old:"",new:""},
						// @case:upper|lower, @base64:encode|decode and @strip.
						selector?: string

						// Static value
						value?: _
					}

					// HTTP status code to override the default denial status code.
					code?: uint & >=300 & <=599

					// HTTP response headers to override the default denial headers.
					headers?: {
						[string]: {
							expression?: string

							// Simple path selector to fetch content from the authorization
							// JSON (e.g. 'request.method') or a string template with
							// variables that resolve to patterns (e.g. "Hello,
							// {auth.identity.name}!").
							// Any pattern supported by
							// https://pkg.go.dev/github.com/tidwall/gjson can be used.
							// The following Authorino custom modifiers are supported:
							// @extract:{sep:" ",pos:0}, @replace{old:"",new:""},
							// @case:upper|lower, @base64:encode|decode and @strip.
							selector?: string

							// Static value
							value?: _
						}
					}

					// HTTP message to override the default denial message.
					message?: {
						expression?: string

						// Simple path selector to fetch content from the authorization
						// JSON (e.g. 'request.method') or a string template with
						// variables that resolve to patterns (e.g. "Hello,
						// {auth.identity.name}!").
						// Any pattern supported by
						// https://pkg.go.dev/github.com/tidwall/gjson can be used.
						// The following Authorino custom modifiers are supported:
						// @extract:{sep:" ",pos:0}, @replace{old:"",new:""},
						// @case:upper|lower, @base64:encode|decode and @strip.
						selector?: string

						// Static value
						value?: _
					}
				}
			}
		}

		// Strategy defines the merge strategy to apply when merging this
		// policy with other policies.
		strategy?: "atomic" | "merge" | *"atomic"

		// Overall conditions for the policy to be enforced.
		// If omitted, the policy will be enforced at all requests to the
		// protected routes.
		// If present, all conditions must match for the policy to be
		// enforced.
		when?: [...{
			predicate: strings.MinRunes(1)
		}]
	}

	// Named sets of patterns that can be referred in `when`
	// conditions and in pattern-matching authorization policy rules.
	patterns?: {
		[string]: {
			allOf: [...{
				// The binary operator to be applied to the content fetched from
				// the authorization JSON, for comparison with "value".
				// Possible values are: "eq" (equal to), "neq" (not equal to),
				// "incl" (includes; for arrays), "excl" (excludes; for arrays),
				// "matches" (regex)
				operator?: "eq" | "neq" | "incl" | "excl" | "matches"

				// Path selector to fetch content from the authorization JSON
				// (e.g. 'request.method').
				// Any pattern supported by
				// https://pkg.go.dev/github.com/tidwall/gjson can be used.
				// Authorino custom JSON path modifiers are also supported.
				selector?: string

				// The value of reference for the comparison with the content
				// fetched from the authorization JSON.
				// If used with the "matches" operator, the value must compile to
				// a valid Golang regex.
				value?: string
			}]
		}
	}

	// The auth rules of the policy.
	// See Authorino's AuthConfig CRD for more details.
	rules?: {
		// Authentication configs.
		// At least one config MUST evaluate to a valid identity object
		// for the auth request to be successful.
		authentication?: {
			[string]: {
				// Anonymous access.
				anonymous?: {}

				// Authentication based on API keys stored in Kubernetes secrets.
				apiKey?: {
					// Whether Authorino should look for API key secrets in all
					// namespaces or only in the same namespace as the AuthConfig.
					// Enabling this option in namespaced Authorino instances has no
					// effect.
					allNamespaces?: bool | *false

					// Label selector used by Authorino to match secrets from the
					// cluster storing valid credentials to authenticate to this
					// service
					selector: {
						// matchExpressions is a list of label selector requirements. The
						// requirements are ANDed.
						matchExpressions?: [...{
							// key is the label key that the selector applies to.
							key: string

							// operator represents a key's relationship to a set of values.
							// Valid operators are In, NotIn, Exists and DoesNotExist.
							operator: string

							// values is an array of string values. If the operator is In or
							// NotIn,
							// the values array must be non-empty. If the operator is Exists
							// or DoesNotExist,
							// the values array must be empty. This array is replaced during a
							// strategic
							// merge patch.
							values?: [...string]
						}]

						// matchLabels is a map of {key,value} pairs. A single {key,value}
						// in the matchLabels
						// map is equivalent to an element of matchExpressions, whose key
						// field is "key", the
						// operator is "In", and the values array contains only "value".
						// The requirements are ANDed.
						matchLabels?: {
							[string]: string
						}
					}
				}

				// Caching options for the resolved object returned when applying
				// this config.
				// Omit it to avoid caching objects for this config.
				cache?: {
					// Key used to store the entry in the cache.
					// The resolved key must be unique within the scope of this
					// particular config.
					key: {
						expression?: string

						// Simple path selector to fetch content from the authorization
						// JSON (e.g. 'request.method') or a string template with
						// variables that resolve to patterns (e.g. "Hello,
						// {auth.identity.name}!").
						// Any pattern supported by
						// https://pkg.go.dev/github.com/tidwall/gjson can be used.
						// The following Authorino custom modifiers are supported:
						// @extract:{sep:" ",pos:0}, @replace{old:"",new:""},
						// @case:upper|lower, @base64:encode|decode and @strip.
						selector?: string

						// Static value
						value?: _
					}

					// Duration (in seconds) of the external data in the cache before
					// pulled again from the source.
					ttl?: int | *60
				}

				// Defines where credentials are required to be passed in the
				// request for authentication based on this config.
				// If omitted, it defaults to credentials passed in the HTTP
				// Authorization header and the "Bearer" prefix prepended to the
				// secret credential value.
				credentials?: {
					authorizationHeader?: {
						prefix?: string
					}
					cookie?: {
						name: string
					}
					customHeader?: {
						name: string
					}
					queryString?: {
						name: string
					}
				}

				// Set default property values (claims) for the resolved identity
				// object, that are set before appending the object to
				// the authorization JSON. If the property is already present in
				// the resolved identity object, the default value is ignored.
				// It requires the resolved identity object to always be a JSON
				// object.
				// Do not use this option with identity objects of other JSON
				// types (array, string, etc).
				defaults?: {
					[string]: {
						expression?: string

						// Simple path selector to fetch content from the authorization
						// JSON (e.g. 'request.method') or a string template with
						// variables that resolve to patterns (e.g. "Hello,
						// {auth.identity.name}!").
						// Any pattern supported by
						// https://pkg.go.dev/github.com/tidwall/gjson can be used.
						// The following Authorino custom modifiers are supported:
						// @extract:{sep:" ",pos:0}, @replace{old:"",new:""},
						// @case:upper|lower, @base64:encode|decode and @strip.
						selector?: string

						// Static value
						value?: _
					}
				}

				// Authentication based on JWT tokens.
				jwt?: {
					// URL of the issuer of the JWT.
					// If `jwksUrl` is omitted, Authorino will append the path to the
					// OpenID Connect Well-Known Discovery endpoint
					// (i.e. "/.well-known/openid-configuration") to this URL, to
					// discover the OIDC configuration where to obtain
					// the "jkws_uri" claim from.
					// The value must coincide with the value of the "iss" (issuer)
					// claim of the discovered OpenID Connect configuration.
					issuerUrl?: string

					// Decides how long to wait before refreshing the JWKS (in
					// seconds).
					// If omitted, Authorino will never refresh the JWKS.
					ttl?: int
				}
				kubernetesTokenReview?: {
					// The list of audiences (scopes) that must be claimed in a
					// Kubernetes authentication token supplied in the request, and
					// reviewed by Authorino.
					// If omitted, Authorino will review tokens expecting the host
					// name of the requested protected service amongst the audiences.
					audiences?: [...string]
				}

				// Whether this config should generate individual observability
				// metrics
				metrics?: bool | *false

				// Authentication by OAuth2 token introspection.
				oauth2Introspection?: {
					credentialsRef: {
						// Name of the referent.
						// This field is effectively required, but due to backwards
						// compatibility is
						// allowed to be empty. Instances of this type with an empty value
						// here are
						// almost certainly wrong.
						// More info:
						// https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names
						name?: string | *""
					}

					// The full URL of the token introspection endpoint.
					endpoint: string

					// The token type hint for the token introspection.
					// If omitted, it defaults to "access_token".
					tokenTypeHint?: string
				}

				// Overrides the resolved identity object by setting the
				// additional properties (claims) specified in this config,
				// before appending the object to the authorization JSON.
				// It requires the resolved identity object to always be a JSON
				// object.
				// Do not use this option with identity objects of other JSON
				// types (array, string, etc).
				overrides?: {
					[string]: {
						expression?: string

						// Simple path selector to fetch content from the authorization
						// JSON (e.g. 'request.method') or a string template with
						// variables that resolve to patterns (e.g. "Hello,
						// {auth.identity.name}!").
						// Any pattern supported by
						// https://pkg.go.dev/github.com/tidwall/gjson can be used.
						// The following Authorino custom modifiers are supported:
						// @extract:{sep:" ",pos:0}, @replace{old:"",new:""},
						// @case:upper|lower, @base64:encode|decode and @strip.
						selector?: string

						// Static value
						value?: _
					}
				}

				// Identity object extracted from the context.
				// Use this method when authentication is performed beforehand by
				// a proxy and the resulting object passed to Authorino as JSON
				// in the auth request.
				plain?: {
					expression?: string

					// Simple path selector to fetch content from the authorization
					// JSON (e.g. 'request.method') or a string template with
					// variables that resolve to patterns (e.g. "Hello,
					// {auth.identity.name}!").
					// Any pattern supported by
					// https://pkg.go.dev/github.com/tidwall/gjson can be used.
					// The following Authorino custom modifiers are supported:
					// @extract:{sep:" ",pos:0}, @replace{old:"",new:""},
					// @case:upper|lower, @base64:encode|decode and @strip.
					selector?: string
				}

				// Priority group of the config.
				// All configs in the same priority group are evaluated
				// concurrently; consecutive priority groups are evaluated
				// sequentially.
				priority?: int | *0

				// Conditions for Authorino to enforce this config.
				// If omitted, the config will be enforced for all requests.
				// If present, all conditions must match for the config to be
				// enforced; otherwise, the config will be skipped.
				when?: [...{
					// A list of pattern expressions to be evaluated as a logical AND.
					all?: [...{}]

					// A list of pattern expressions to be evaluated as a logical OR.
					any?: [...{}]

					// The binary operator to be applied to the content fetched from
					// the authorization JSON, for comparison with "value".
					// Possible values are: "eq" (equal to), "neq" (not equal to),
					// "incl" (includes; for arrays), "excl" (excludes; for arrays),
					// "matches" (regex)
					operator?: "eq" | "neq" | "incl" | "excl" | "matches"

					// Reference to a named set of pattern expressions
					patternRef?: string
					predicate?:  string

					// Path selector to fetch content from the authorization JSON
					// (e.g. 'request.method').
					// Any pattern supported by
					// https://pkg.go.dev/github.com/tidwall/gjson can be used.
					// Authorino custom JSON path modifiers are also supported.
					selector?: string

					// The value of reference for the comparison with the content
					// fetched from the authorization JSON.
					// If used with the "matches" operator, the value must compile to
					// a valid Golang regex.
					value?: string
				}]

				// Authentication based on client X.509 certificates.
				// The certificates presented by the clients must be signed by a
				// trusted CA whose certificates are stored in Kubernetes
				// secrets.
				x509?: {
					// Whether Authorino should look for TLS secrets in all namespaces
					// or only in the same namespace as the AuthConfig.
					// Enabling this option in namespaced Authorino instances has no
					// effect.
					allNamespaces?: bool | *false

					// Label selector used by Authorino to match secrets from the
					// cluster storing trusted CA certificates to validate
					// clients trying to authenticate to this service
					selector: {
						// matchExpressions is a list of label selector requirements. The
						// requirements are ANDed.
						matchExpressions?: [...{
							// key is the label key that the selector applies to.
							key: string

							// operator represents a key's relationship to a set of values.
							// Valid operators are In, NotIn, Exists and DoesNotExist.
							operator: string

							// values is an array of string values. If the operator is In or
							// NotIn,
							// the values array must be non-empty. If the operator is Exists
							// or DoesNotExist,
							// the values array must be empty. This array is replaced during a
							// strategic
							// merge patch.
							values?: [...string]
						}]

						// matchLabels is a map of {key,value} pairs. A single {key,value}
						// in the matchLabels
						// map is equivalent to an element of matchExpressions, whose key
						// field is "key", the
						// operator is "In", and the values array contains only "value".
						// The requirements are ANDed.
						matchLabels?: {
							[string]: string
						}
					}
				}
			}
		}

		// Authorization policies.
		// All policies MUST evaluate to "allowed = true" for the auth
		// request be successful.
		authorization?: {
			[string]: {
				// Caching options for the resolved object returned when applying
				// this config.
				// Omit it to avoid caching objects for this config.
				cache?: {
					// Key used to store the entry in the cache.
					// The resolved key must be unique within the scope of this
					// particular config.
					key: {
						expression?: string

						// Simple path selector to fetch content from the authorization
						// JSON (e.g. 'request.method') or a string template with
						// variables that resolve to patterns (e.g. "Hello,
						// {auth.identity.name}!").
						// Any pattern supported by
						// https://pkg.go.dev/github.com/tidwall/gjson can be used.
						// The following Authorino custom modifiers are supported:
						// @extract:{sep:" ",pos:0}, @replace{old:"",new:""},
						// @case:upper|lower, @base64:encode|decode and @strip.
						selector?: string

						// Static value
						value?: _
					}

					// Duration (in seconds) of the external data in the cache before
					// pulled again from the source.
					ttl?: int | *60
				}

				// Authorization by Kubernetes SubjectAccessReview
				kubernetesSubjectAccessReview?: {
					// Groups the user must be a member of or, if `user` is omitted,
					// the groups to check for authorization in the Kubernetes RBAC.
					groups?: [...string]

					// Use resourceAttributes to check permissions on Kubernetes
					// resources.
					// If omitted, it performs a non-resource SubjectAccessReview,
					// with verb and path inferred from the request.
					resourceAttributes?: {
						// API group of the resource.
						// Use '*' for all API groups.
						group?: {
							expression?: string

							// Simple path selector to fetch content from the authorization
							// JSON (e.g. 'request.method') or a string template with
							// variables that resolve to patterns (e.g. "Hello,
							// {auth.identity.name}!").
							// Any pattern supported by
							// https://pkg.go.dev/github.com/tidwall/gjson can be used.
							// The following Authorino custom modifiers are supported:
							// @extract:{sep:" ",pos:0}, @replace{old:"",new:""},
							// @case:upper|lower, @base64:encode|decode and @strip.
							selector?: string

							// Static value
							value?: _
						}

						// Resource name
						// Omit it to check for authorization on all resources of the
						// specified kind.
						name?: {
							expression?: string

							// Simple path selector to fetch content from the authorization
							// JSON (e.g. 'request.method') or a string template with
							// variables that resolve to patterns (e.g. "Hello,
							// {auth.identity.name}!").
							// Any pattern supported by
							// https://pkg.go.dev/github.com/tidwall/gjson can be used.
							// The following Authorino custom modifiers are supported:
							// @extract:{sep:" ",pos:0}, @replace{old:"",new:""},
							// @case:upper|lower, @base64:encode|decode and @strip.
							selector?: string

							// Static value
							value?: _
						}

						// Namespace where the user must have permissions on the resource.
						namespace?: {
							expression?: string

							// Simple path selector to fetch content from the authorization
							// JSON (e.g. 'request.method') or a string template with
							// variables that resolve to patterns (e.g. "Hello,
							// {auth.identity.name}!").
							// Any pattern supported by
							// https://pkg.go.dev/github.com/tidwall/gjson can be used.
							// The following Authorino custom modifiers are supported:
							// @extract:{sep:" ",pos:0}, @replace{old:"",new:""},
							// @case:upper|lower, @base64:encode|decode and @strip.
							selector?: string

							// Static value
							value?: _
						}

						// Resource kind
						// Use '*' for all resource kinds.
						resource?: {
							expression?: string

							// Simple path selector to fetch content from the authorization
							// JSON (e.g. 'request.method') or a string template with
							// variables that resolve to patterns (e.g. "Hello,
							// {auth.identity.name}!").
							// Any pattern supported by
							// https://pkg.go.dev/github.com/tidwall/gjson can be used.
							// The following Authorino custom modifiers are supported:
							// @extract:{sep:" ",pos:0}, @replace{old:"",new:""},
							// @case:upper|lower, @base64:encode|decode and @strip.
							selector?: string

							// Static value
							value?: _
						}

						// Subresource kind
						subresource?: {
							expression?: string

							// Simple path selector to fetch content from the authorization
							// JSON (e.g. 'request.method') or a string template with
							// variables that resolve to patterns (e.g. "Hello,
							// {auth.identity.name}!").
							// Any pattern supported by
							// https://pkg.go.dev/github.com/tidwall/gjson can be used.
							// The following Authorino custom modifiers are supported:
							// @extract:{sep:" ",pos:0}, @replace{old:"",new:""},
							// @case:upper|lower, @base64:encode|decode and @strip.
							selector?: string

							// Static value
							value?: _
						}

						// Verb to check for authorization on the resource.
						// Use '*' for all verbs.
						verb?: {
							expression?: string

							// Simple path selector to fetch content from the authorization
							// JSON (e.g. 'request.method') or a string template with
							// variables that resolve to patterns (e.g. "Hello,
							// {auth.identity.name}!").
							// Any pattern supported by
							// https://pkg.go.dev/github.com/tidwall/gjson can be used.
							// The following Authorino custom modifiers are supported:
							// @extract:{sep:" ",pos:0}, @replace{old:"",new:""},
							// @case:upper|lower, @base64:encode|decode and @strip.
							selector?: string

							// Static value
							value?: _
						}
					}

					// User to check for authorization in the Kubernetes RBAC.
					// Omit it to check for group authorization only.
					user?: {
						expression?: string

						// Simple path selector to fetch content from the authorization
						// JSON (e.g. 'request.method') or a string template with
						// variables that resolve to patterns (e.g. "Hello,
						// {auth.identity.name}!").
						// Any pattern supported by
						// https://pkg.go.dev/github.com/tidwall/gjson can be used.
						// The following Authorino custom modifiers are supported:
						// @extract:{sep:" ",pos:0}, @replace{old:"",new:""},
						// @case:upper|lower, @base64:encode|decode and @strip.
						selector?: string

						// Static value
						value?: _
					}
				}

				// Whether this config should generate individual observability
				// metrics
				metrics?: bool | *false

				// Open Policy Agent (OPA) Rego policy.
				opa?: {
					// Returns the value of all Rego rules in the virtual document.
					// Values can be read in subsequent evaluators/phases of the Auth
					// Pipeline.
					// Otherwise, only the default `allow` rule will be exposed.
					// Returning all Rego rules can affect performance of OPA policies
					// during reconciliation (policy precompile) and at runtime.
					allValues?: bool | *false

					// Settings for fetching the OPA policy from an external registry.
					// Use it alternatively to 'rego'.
					// For the configurations of the HTTP request, the following
					// options are not implemented: 'method', 'body',
					// 'bodyParameters',
					// 'contentType', 'headers', 'oauth2'. Use it only with: 'url',
					// 'sharedSecret', 'credentials'.
					externalPolicy?: {
						// Raw body of the HTTP request.
						// Supersedes 'bodyParameters'; use either one or the other.
						// Use it with method=POST; for GET requests, set parameters as
						// query string in the 'endpoint' (placeholders can be used).
						body?: {
							expression?: string

							// Simple path selector to fetch content from the authorization
							// JSON (e.g. 'request.method') or a string template with
							// variables that resolve to patterns (e.g. "Hello,
							// {auth.identity.name}!").
							// Any pattern supported by
							// https://pkg.go.dev/github.com/tidwall/gjson can be used.
							// The following Authorino custom modifiers are supported:
							// @extract:{sep:" ",pos:0}, @replace{old:"",new:""},
							// @case:upper|lower, @base64:encode|decode and @strip.
							selector?: string

							// Static value
							value?: _
						}

						// Custom parameters to encode in the body of the HTTP request.
						// Superseded by 'body'; use either one or the other.
						// Use it with method=POST; for GET requests, set parameters as
						// query string in the 'endpoint' (placeholders can be used).
						bodyParameters?: {
							[string]: {
								expression?: string

								// Simple path selector to fetch content from the authorization
								// JSON (e.g. 'request.method') or a string template with
								// variables that resolve to patterns (e.g. "Hello,
								// {auth.identity.name}!").
								// Any pattern supported by
								// https://pkg.go.dev/github.com/tidwall/gjson can be used.
								// The following Authorino custom modifiers are supported:
								// @extract:{sep:" ",pos:0}, @replace{old:"",new:""},
								// @case:upper|lower, @base64:encode|decode and @strip.
								selector?: string

								// Static value
								value?: _
							}
						}

						// Content-Type of the request body. Shapes how 'bodyParameters'
						// are encoded.
						// Use it with method=POST; for GET requests, Content-Type is
						// automatically set to 'text/plain'.
						contentType?: "application/x-www-form-urlencoded" | "application/json" | *"application/x-www-form-urlencoded"

						// Defines where client credentials will be passed in the request
						// to the service.
						// If omitted, it defaults to client credentials passed in the
						// HTTP Authorization header and the "Bearer" prefix expected
						// prepended to the secret value.
						credentials?: {
							authorizationHeader?: {
								prefix?: string
							}
							cookie?: {
								name: string
							}
							customHeader?: {
								name: string
							}
							queryString?: {
								name: string
							}
						}

						// Custom headers in the HTTP request.
						headers?: {
							[string]: {
								expression?: string

								// Simple path selector to fetch content from the authorization
								// JSON (e.g. 'request.method') or a string template with
								// variables that resolve to patterns (e.g. "Hello,
								// {auth.identity.name}!").
								// Any pattern supported by
								// https://pkg.go.dev/github.com/tidwall/gjson can be used.
								// The following Authorino custom modifiers are supported:
								// @extract:{sep:" ",pos:0}, @replace{old:"",new:""},
								// @case:upper|lower, @base64:encode|decode and @strip.
								selector?: string

								// Static value
								value?: _
							}
						}

						// HTTP verb used in the request to the service. Accepted values:
						// GET (default), POST.
						// When the request method is POST, the authorization JSON is
						// passed in the body of the request.
						method?: "GET" | "POST" | "PUT" | "PATCH" | "DELETE" | "HEAD" | "OPTIONS" | "CONNECT" | "TRACE" | *"GET"

						// Authentication with the HTTP service by OAuth2 Client
						// Credentials grant.
						oauth2?: {
							// Caches and reuses the token until expired.
							// Set it to false to force fetch the token at every authorization
							// request regardless of expiration.
							cache?: bool | *true

							// OAuth2 Client ID.
							clientId: string

							// Reference to a Kuberentes Secret key that stores that OAuth2
							// Client Secret.
							clientSecretRef: {
								// The key of the secret to select from. Must be a valid secret
								// key.
								key: string

								// The name of the secret in the Authorino's namespace to select
								// from.
								name: string
							}

							// Optional extra parameters for the requests to the token URL.
							extraParams?: {
								[string]: string
							}

							// Optional scopes for the client credentials grant, if supported
							// by he OAuth2 server.
							scopes?: [...string]

							// Token endpoint URL of the OAuth2 resource server.
							tokenUrl: string
						}

						// Reference to a Secret key whose value will be passed by
						// Authorino in the request.
						// The HTTP service can use the shared secret to authenticate the
						// origin of the request.
						// Ignored if used together with oauth2.
						sharedSecretRef?: {
							// The key of the secret to select from. Must be a valid secret
							// key.
							key: string

							// The name of the secret in the Authorino's namespace to select
							// from.
							name: string
						}

						// Duration (in seconds) of the external data in the cache before
						// pulled again from the source.
						ttl?: int

						// Endpoint URL of the HTTP service.
						// The value can include variable placeholders in the format
						// "{selector}", where "selector" is any pattern supported
						// by https://pkg.go.dev/github.com/tidwall/gjson and selects
						// value from the authorization JSON.
						// E.g. https://ext-auth-server.io/metadata?p={request.path}
						url?:           string
						urlExpression?: string
					}

					// Authorization policy as a Rego language document.
					// The Rego document must include the "allow" condition, set by
					// Authorino to "false" by default (i.e. requests are
					// unauthorized unless changed).
					// The Rego document must NOT include the "package" declaration in
					// line 1.
					rego?: string
				}
				patternMatching?: {
					patterns: [...{
						// A list of pattern expressions to be evaluated as a logical AND.
						all?: [...{}]

						// A list of pattern expressions to be evaluated as a logical OR.
						any?: [...{}]

						// The binary operator to be applied to the content fetched from
						// the authorization JSON, for comparison with "value".
						// Possible values are: "eq" (equal to), "neq" (not equal to),
						// "incl" (includes; for arrays), "excl" (excludes; for arrays),
						// "matches" (regex)
						operator?: "eq" | "neq" | "incl" | "excl" | "matches"

						// Reference to a named set of pattern expressions
						patternRef?: string
						predicate?:  string

						// Path selector to fetch content from the authorization JSON
						// (e.g. 'request.method').
						// Any pattern supported by
						// https://pkg.go.dev/github.com/tidwall/gjson can be used.
						// Authorino custom JSON path modifiers are also supported.
						selector?: string

						// The value of reference for the comparison with the content
						// fetched from the authorization JSON.
						// If used with the "matches" operator, the value must compile to
						// a valid Golang regex.
						value?: string
					}]
				}

				// Priority group of the config.
				// All configs in the same priority group are evaluated
				// concurrently; consecutive priority groups are evaluated
				// sequentially.
				priority?: int | *0

				// Authorization decision delegated to external Authzed/SpiceDB
				// server.
				spicedb?: {
					// Hostname and port number to the GRPC interface of the SpiceDB
					// server (e.g. spicedb:50051).
					endpoint: string

					// Insecure HTTP connection (i.e. disables TLS verification)
					insecure?: bool

					// The name of the permission (or relation) on which to execute
					// the check.
					permission?: {
						expression?: string

						// Simple path selector to fetch content from the authorization
						// JSON (e.g. 'request.method') or a string template with
						// variables that resolve to patterns (e.g. "Hello,
						// {auth.identity.name}!").
						// Any pattern supported by
						// https://pkg.go.dev/github.com/tidwall/gjson can be used.
						// The following Authorino custom modifiers are supported:
						// @extract:{sep:" ",pos:0}, @replace{old:"",new:""},
						// @case:upper|lower, @base64:encode|decode and @strip.
						selector?: string

						// Static value
						value?: _
					}

					// The resource on which to check the permission or relation.
					resource?: {
						kind?: {
							expression?: string

							// Simple path selector to fetch content from the authorization
							// JSON (e.g. 'request.method') or a string template with
							// variables that resolve to patterns (e.g. "Hello,
							// {auth.identity.name}!").
							// Any pattern supported by
							// https://pkg.go.dev/github.com/tidwall/gjson can be used.
							// The following Authorino custom modifiers are supported:
							// @extract:{sep:" ",pos:0}, @replace{old:"",new:""},
							// @case:upper|lower, @base64:encode|decode and @strip.
							selector?: string

							// Static value
							value?: _
						}
						name?: {
							expression?: string

							// Simple path selector to fetch content from the authorization
							// JSON (e.g. 'request.method') or a string template with
							// variables that resolve to patterns (e.g. "Hello,
							// {auth.identity.name}!").
							// Any pattern supported by
							// https://pkg.go.dev/github.com/tidwall/gjson can be used.
							// The following Authorino custom modifiers are supported:
							// @extract:{sep:" ",pos:0}, @replace{old:"",new:""},
							// @case:upper|lower, @base64:encode|decode and @strip.
							selector?: string

							// Static value
							value?: _
						}
					}

					// Reference to a Secret key whose value will be used by Authorino
					// to authenticate with the Authzed service.
					sharedSecretRef?: {
						// The key of the secret to select from. Must be a valid secret
						// key.
						key: string

						// The name of the secret in the Authorino's namespace to select
						// from.
						name: string
					}

					// The subject that will be checked for the permission or
					// relation.
					subject?: {
						kind?: {
							expression?: string

							// Simple path selector to fetch content from the authorization
							// JSON (e.g. 'request.method') or a string template with
							// variables that resolve to patterns (e.g. "Hello,
							// {auth.identity.name}!").
							// Any pattern supported by
							// https://pkg.go.dev/github.com/tidwall/gjson can be used.
							// The following Authorino custom modifiers are supported:
							// @extract:{sep:" ",pos:0}, @replace{old:"",new:""},
							// @case:upper|lower, @base64:encode|decode and @strip.
							selector?: string

							// Static value
							value?: _
						}
						name?: {
							expression?: string

							// Simple path selector to fetch content from the authorization
							// JSON (e.g. 'request.method') or a string template with
							// variables that resolve to patterns (e.g. "Hello,
							// {auth.identity.name}!").
							// Any pattern supported by
							// https://pkg.go.dev/github.com/tidwall/gjson can be used.
							// The following Authorino custom modifiers are supported:
							// @extract:{sep:" ",pos:0}, @replace{old:"",new:""},
							// @case:upper|lower, @base64:encode|decode and @strip.
							selector?: string

							// Static value
							value?: _
						}
					}
				}

				// Conditions for Authorino to enforce this config.
				// If omitted, the config will be enforced for all requests.
				// If present, all conditions must match for the config to be
				// enforced; otherwise, the config will be skipped.
				when?: [...{
					// A list of pattern expressions to be evaluated as a logical AND.
					all?: [...{}]

					// A list of pattern expressions to be evaluated as a logical OR.
					any?: [...{}]

					// The binary operator to be applied to the content fetched from
					// the authorization JSON, for comparison with "value".
					// Possible values are: "eq" (equal to), "neq" (not equal to),
					// "incl" (includes; for arrays), "excl" (excludes; for arrays),
					// "matches" (regex)
					operator?: "eq" | "neq" | "incl" | "excl" | "matches"

					// Reference to a named set of pattern expressions
					patternRef?: string
					predicate?:  string

					// Path selector to fetch content from the authorization JSON
					// (e.g. 'request.method').
					// Any pattern supported by
					// https://pkg.go.dev/github.com/tidwall/gjson can be used.
					// Authorino custom JSON path modifiers are also supported.
					selector?: string

					// The value of reference for the comparison with the content
					// fetched from the authorization JSON.
					// If used with the "matches" operator, the value must compile to
					// a valid Golang regex.
					value?: string
				}]
			}
		}

		// Callback functions.
		// Authorino sends callbacks at the end of the auth pipeline to
		// the endpoints specified in this config.
		callbacks?: {
			[string]: {
				// Caching options for the resolved object returned when applying
				// this config.
				// Omit it to avoid caching objects for this config.
				cache?: {
					// Key used to store the entry in the cache.
					// The resolved key must be unique within the scope of this
					// particular config.
					key: {
						expression?: string

						// Simple path selector to fetch content from the authorization
						// JSON (e.g. 'request.method') or a string template with
						// variables that resolve to patterns (e.g. "Hello,
						// {auth.identity.name}!").
						// Any pattern supported by
						// https://pkg.go.dev/github.com/tidwall/gjson can be used.
						// The following Authorino custom modifiers are supported:
						// @extract:{sep:" ",pos:0}, @replace{old:"",new:""},
						// @case:upper|lower, @base64:encode|decode and @strip.
						selector?: string

						// Static value
						value?: _
					}

					// Duration (in seconds) of the external data in the cache before
					// pulled again from the source.
					ttl?: int | *60
				}

				// Settings of the external HTTP request
				http: {
					// Raw body of the HTTP request.
					// Supersedes 'bodyParameters'; use either one or the other.
					// Use it with method=POST; for GET requests, set parameters as
					// query string in the 'endpoint' (placeholders can be used).
					body?: {
						expression?: string

						// Simple path selector to fetch content from the authorization
						// JSON (e.g. 'request.method') or a string template with
						// variables that resolve to patterns (e.g. "Hello,
						// {auth.identity.name}!").
						// Any pattern supported by
						// https://pkg.go.dev/github.com/tidwall/gjson can be used.
						// The following Authorino custom modifiers are supported:
						// @extract:{sep:" ",pos:0}, @replace{old:"",new:""},
						// @case:upper|lower, @base64:encode|decode and @strip.
						selector?: string

						// Static value
						value?: _
					}

					// Custom parameters to encode in the body of the HTTP request.
					// Superseded by 'body'; use either one or the other.
					// Use it with method=POST; for GET requests, set parameters as
					// query string in the 'endpoint' (placeholders can be used).
					bodyParameters?: {
						[string]: {
							expression?: string

							// Simple path selector to fetch content from the authorization
							// JSON (e.g. 'request.method') or a string template with
							// variables that resolve to patterns (e.g. "Hello,
							// {auth.identity.name}!").
							// Any pattern supported by
							// https://pkg.go.dev/github.com/tidwall/gjson can be used.
							// The following Authorino custom modifiers are supported:
							// @extract:{sep:" ",pos:0}, @replace{old:"",new:""},
							// @case:upper|lower, @base64:encode|decode and @strip.
							selector?: string

							// Static value
							value?: _
						}
					}

					// Content-Type of the request body. Shapes how 'bodyParameters'
					// are encoded.
					// Use it with method=POST; for GET requests, Content-Type is
					// automatically set to 'text/plain'.
					contentType?: "application/x-www-form-urlencoded" | "application/json" | *"application/x-www-form-urlencoded"

					// Defines where client credentials will be passed in the request
					// to the service.
					// If omitted, it defaults to client credentials passed in the
					// HTTP Authorization header and the "Bearer" prefix expected
					// prepended to the secret value.
					credentials?: {
						authorizationHeader?: {
							prefix?: string
						}
						cookie?: {
							name: string
						}
						customHeader?: {
							name: string
						}
						queryString?: {
							name: string
						}
					}

					// Custom headers in the HTTP request.
					headers?: {
						[string]: {
							expression?: string

							// Simple path selector to fetch content from the authorization
							// JSON (e.g. 'request.method') or a string template with
							// variables that resolve to patterns (e.g. "Hello,
							// {auth.identity.name}!").
							// Any pattern supported by
							// https://pkg.go.dev/github.com/tidwall/gjson can be used.
							// The following Authorino custom modifiers are supported:
							// @extract:{sep:" ",pos:0}, @replace{old:"",new:""},
							// @case:upper|lower, @base64:encode|decode and @strip.
							selector?: string

							// Static value
							value?: _
						}
					}

					// HTTP verb used in the request to the service. Accepted values:
					// GET (default), POST.
					// When the request method is POST, the authorization JSON is
					// passed in the body of the request.
					method?: "GET" | "POST" | "PUT" | "PATCH" | "DELETE" | "HEAD" | "OPTIONS" | "CONNECT" | "TRACE" | *"GET"

					// Authentication with the HTTP service by OAuth2 Client
					// Credentials grant.
					oauth2?: {
						// Caches and reuses the token until expired.
						// Set it to false to force fetch the token at every authorization
						// request regardless of expiration.
						cache?: bool | *true

						// OAuth2 Client ID.
						clientId: string

						// Reference to a Kuberentes Secret key that stores that OAuth2
						// Client Secret.
						clientSecretRef: {
							// The key of the secret to select from. Must be a valid secret
							// key.
							key: string

							// The name of the secret in the Authorino's namespace to select
							// from.
							name: string
						}

						// Optional extra parameters for the requests to the token URL.
						extraParams?: {
							[string]: string
						}

						// Optional scopes for the client credentials grant, if supported
						// by he OAuth2 server.
						scopes?: [...string]

						// Token endpoint URL of the OAuth2 resource server.
						tokenUrl: string
					}

					// Reference to a Secret key whose value will be passed by
					// Authorino in the request.
					// The HTTP service can use the shared secret to authenticate the
					// origin of the request.
					// Ignored if used together with oauth2.
					sharedSecretRef?: {
						// The key of the secret to select from. Must be a valid secret
						// key.
						key: string

						// The name of the secret in the Authorino's namespace to select
						// from.
						name: string
					}

					// Endpoint URL of the HTTP service.
					// The value can include variable placeholders in the format
					// "{selector}", where "selector" is any pattern supported
					// by https://pkg.go.dev/github.com/tidwall/gjson and selects
					// value from the authorization JSON.
					// E.g. https://ext-auth-server.io/metadata?p={request.path}
					url?:           string
					urlExpression?: string
				}

				// Whether this config should generate individual observability
				// metrics
				metrics?: bool | *false

				// Priority group of the config.
				// All configs in the same priority group are evaluated
				// concurrently; consecutive priority groups are evaluated
				// sequentially.
				priority?: int | *0

				// Conditions for Authorino to enforce this config.
				// If omitted, the config will be enforced for all requests.
				// If present, all conditions must match for the config to be
				// enforced; otherwise, the config will be skipped.
				when?: [...{
					// A list of pattern expressions to be evaluated as a logical AND.
					all?: [...{}]

					// A list of pattern expressions to be evaluated as a logical OR.
					any?: [...{}]

					// The binary operator to be applied to the content fetched from
					// the authorization JSON, for comparison with "value".
					// Possible values are: "eq" (equal to), "neq" (not equal to),
					// "incl" (includes; for arrays), "excl" (excludes; for arrays),
					// "matches" (regex)
					operator?: "eq" | "neq" | "incl" | "excl" | "matches"

					// Reference to a named set of pattern expressions
					patternRef?: string
					predicate?:  string

					// Path selector to fetch content from the authorization JSON
					// (e.g. 'request.method').
					// Any pattern supported by
					// https://pkg.go.dev/github.com/tidwall/gjson can be used.
					// Authorino custom JSON path modifiers are also supported.
					selector?: string

					// The value of reference for the comparison with the content
					// fetched from the authorization JSON.
					// If used with the "matches" operator, the value must compile to
					// a valid Golang regex.
					value?: string
				}]
			}
		}

		// Metadata sources.
		// Authorino fetches auth metadata as JSON from sources specified
		// in this config.
		metadata?: {
			[string]: {
				// Caching options for the resolved object returned when applying
				// this config.
				// Omit it to avoid caching objects for this config.
				cache?: {
					// Key used to store the entry in the cache.
					// The resolved key must be unique within the scope of this
					// particular config.
					key: {
						expression?: string

						// Simple path selector to fetch content from the authorization
						// JSON (e.g. 'request.method') or a string template with
						// variables that resolve to patterns (e.g. "Hello,
						// {auth.identity.name}!").
						// Any pattern supported by
						// https://pkg.go.dev/github.com/tidwall/gjson can be used.
						// The following Authorino custom modifiers are supported:
						// @extract:{sep:" ",pos:0}, @replace{old:"",new:""},
						// @case:upper|lower, @base64:encode|decode and @strip.
						selector?: string

						// Static value
						value?: _
					}

					// Duration (in seconds) of the external data in the cache before
					// pulled again from the source.
					ttl?: int | *60
				}

				// External source of auth metadata via HTTP request
				http?: {
					// Raw body of the HTTP request.
					// Supersedes 'bodyParameters'; use either one or the other.
					// Use it with method=POST; for GET requests, set parameters as
					// query string in the 'endpoint' (placeholders can be used).
					body?: {
						expression?: string

						// Simple path selector to fetch content from the authorization
						// JSON (e.g. 'request.method') or a string template with
						// variables that resolve to patterns (e.g. "Hello,
						// {auth.identity.name}!").
						// Any pattern supported by
						// https://pkg.go.dev/github.com/tidwall/gjson can be used.
						// The following Authorino custom modifiers are supported:
						// @extract:{sep:" ",pos:0}, @replace{old:"",new:""},
						// @case:upper|lower, @base64:encode|decode and @strip.
						selector?: string

						// Static value
						value?: _
					}

					// Custom parameters to encode in the body of the HTTP request.
					// Superseded by 'body'; use either one or the other.
					// Use it with method=POST; for GET requests, set parameters as
					// query string in the 'endpoint' (placeholders can be used).
					bodyParameters?: {
						[string]: {
							expression?: string

							// Simple path selector to fetch content from the authorization
							// JSON (e.g. 'request.method') or a string template with
							// variables that resolve to patterns (e.g. "Hello,
							// {auth.identity.name}!").
							// Any pattern supported by
							// https://pkg.go.dev/github.com/tidwall/gjson can be used.
							// The following Authorino custom modifiers are supported:
							// @extract:{sep:" ",pos:0}, @replace{old:"",new:""},
							// @case:upper|lower, @base64:encode|decode and @strip.
							selector?: string

							// Static value
							value?: _
						}
					}

					// Content-Type of the request body. Shapes how 'bodyParameters'
					// are encoded.
					// Use it with method=POST; for GET requests, Content-Type is
					// automatically set to 'text/plain'.
					contentType?: "application/x-www-form-urlencoded" | "application/json" | *"application/x-www-form-urlencoded"

					// Defines where client credentials will be passed in the request
					// to the service.
					// If omitted, it defaults to client credentials passed in the
					// HTTP Authorization header and the "Bearer" prefix expected
					// prepended to the secret value.
					credentials?: {
						authorizationHeader?: {
							prefix?: string
						}
						cookie?: {
							name: string
						}
						customHeader?: {
							name: string
						}
						queryString?: {
							name: string
						}
					}

					// Custom headers in the HTTP request.
					headers?: {
						[string]: {
							expression?: string

							// Simple path selector to fetch content from the authorization
							// JSON (e.g. 'request.method') or a string template with
							// variables that resolve to patterns (e.g. "Hello,
							// {auth.identity.name}!").
							// Any pattern supported by
							// https://pkg.go.dev/github.com/tidwall/gjson can be used.
							// The following Authorino custom modifiers are supported:
							// @extract:{sep:" ",pos:0}, @replace{old:"",new:""},
							// @case:upper|lower, @base64:encode|decode and @strip.
							selector?: string

							// Static value
							value?: _
						}
					}

					// HTTP verb used in the request to the service. Accepted values:
					// GET (default), POST.
					// When the request method is POST, the authorization JSON is
					// passed in the body of the request.
					method?: "GET" | "POST" | "PUT" | "PATCH" | "DELETE" | "HEAD" | "OPTIONS" | "CONNECT" | "TRACE" | *"GET"

					// Authentication with the HTTP service by OAuth2 Client
					// Credentials grant.
					oauth2?: {
						// Caches and reuses the token until expired.
						// Set it to false to force fetch the token at every authorization
						// request regardless of expiration.
						cache?: bool | *true

						// OAuth2 Client ID.
						clientId: string

						// Reference to a Kuberentes Secret key that stores that OAuth2
						// Client Secret.
						clientSecretRef: {
							// The key of the secret to select from. Must be a valid secret
							// key.
							key: string

							// The name of the secret in the Authorino's namespace to select
							// from.
							name: string
						}

						// Optional extra parameters for the requests to the token URL.
						extraParams?: {
							[string]: string
						}

						// Optional scopes for the client credentials grant, if supported
						// by he OAuth2 server.
						scopes?: [...string]

						// Token endpoint URL of the OAuth2 resource server.
						tokenUrl: string
					}

					// Reference to a Secret key whose value will be passed by
					// Authorino in the request.
					// The HTTP service can use the shared secret to authenticate the
					// origin of the request.
					// Ignored if used together with oauth2.
					sharedSecretRef?: {
						// The key of the secret to select from. Must be a valid secret
						// key.
						key: string

						// The name of the secret in the Authorino's namespace to select
						// from.
						name: string
					}

					// Endpoint URL of the HTTP service.
					// The value can include variable placeholders in the format
					// "{selector}", where "selector" is any pattern supported
					// by https://pkg.go.dev/github.com/tidwall/gjson and selects
					// value from the authorization JSON.
					// E.g. https://ext-auth-server.io/metadata?p={request.path}
					url?:           string
					urlExpression?: string
				}

				// Whether this config should generate individual observability
				// metrics
				metrics?: bool | *false

				// Priority group of the config.
				// All configs in the same priority group are evaluated
				// concurrently; consecutive priority groups are evaluated
				// sequentially.
				priority?: int | *0

				// User-Managed Access (UMA) source of resource data.
				uma?: {
					credentialsRef: {
						// Name of the referent.
						// This field is effectively required, but due to backwards
						// compatibility is
						// allowed to be empty. Instances of this type with an empty value
						// here are
						// almost certainly wrong.
						// More info:
						// https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names
						name?: string | *""
					}

					// The endpoint of the UMA server.
					// The value must coincide with the "issuer" claim of the UMA
					// config discovered from the well-known uma configuration
					// endpoint.
					endpoint: string
				}
				userInfo?: {
					// The name of an OIDC-enabled JWT authentication config whose
					// OpenID Connect configuration discovered includes the OIDC
					// "userinfo_endpoint" claim.
					identitySource: string
				}

				// Conditions for Authorino to enforce this config.
				// If omitted, the config will be enforced for all requests.
				// If present, all conditions must match for the config to be
				// enforced; otherwise, the config will be skipped.
				when?: [...{
					// A list of pattern expressions to be evaluated as a logical AND.
					all?: [...{}]

					// A list of pattern expressions to be evaluated as a logical OR.
					any?: [...{}]

					// The binary operator to be applied to the content fetched from
					// the authorization JSON, for comparison with "value".
					// Possible values are: "eq" (equal to), "neq" (not equal to),
					// "incl" (includes; for arrays), "excl" (excludes; for arrays),
					// "matches" (regex)
					operator?: "eq" | "neq" | "incl" | "excl" | "matches"

					// Reference to a named set of pattern expressions
					patternRef?: string
					predicate?:  string

					// Path selector to fetch content from the authorization JSON
					// (e.g. 'request.method').
					// Any pattern supported by
					// https://pkg.go.dev/github.com/tidwall/gjson can be used.
					// Authorino custom JSON path modifiers are also supported.
					selector?: string

					// The value of reference for the comparison with the content
					// fetched from the authorization JSON.
					// If used with the "matches" operator, the value must compile to
					// a valid Golang regex.
					value?: string
				}]
			}
		}

		// Response items.
		// Authorino builds custom responses to the client of the auth
		// request.
		response?: {
			// Response items to be included in the auth response when the
			// request is authenticated and authorized.
			// For integration of Authorino via proxy, the proxy must use
			// these settings to propagate dynamic metadata and/or inject
			// data in the request.
			success?: {
				// Custom data made available to other filters managed by Kuadrant
				// (i.e. Rate Limit)
				filters?: {
					[string]: {
						// Caching options for the resolved object returned when applying
						// this config.
						// Omit it to avoid caching objects for this config.
						cache?: {
							// Key used to store the entry in the cache.
							// The resolved key must be unique within the scope of this
							// particular config.
							key: {
								expression?: string

								// Simple path selector to fetch content from the authorization
								// JSON (e.g. 'request.method') or a string template with
								// variables that resolve to patterns (e.g. "Hello,
								// {auth.identity.name}!").
								// Any pattern supported by
								// https://pkg.go.dev/github.com/tidwall/gjson can be used.
								// The following Authorino custom modifiers are supported:
								// @extract:{sep:" ",pos:0}, @replace{old:"",new:""},
								// @case:upper|lower, @base64:encode|decode and @strip.
								selector?: string

								// Static value
								value?: _
							}

							// Duration (in seconds) of the external data in the cache before
							// pulled again from the source.
							ttl?: int | *60
						}
						json?: {
							properties: {
								[string]: {
									expression?: string

									// Simple path selector to fetch content from the authorization
									// JSON (e.g. 'request.method') or a string template with
									// variables that resolve to patterns (e.g. "Hello,
									// {auth.identity.name}!").
									// Any pattern supported by
									// https://pkg.go.dev/github.com/tidwall/gjson can be used.
									// The following Authorino custom modifiers are supported:
									// @extract:{sep:" ",pos:0}, @replace{old:"",new:""},
									// @case:upper|lower, @base64:encode|decode and @strip.
									selector?: string

									// Static value
									value?: _
								}
							}
						}

						// The key used to add the custom response item (name of the HTTP
						// header or root property of the Dynamic Metadata object).
						// If omitted, it will be set to the name of the response config.
						key?: string

						// Whether this config should generate individual observability
						// metrics
						metrics?: bool | *false

						// Plain text content
						plain?: {
							expression?: string

							// Simple path selector to fetch content from the authorization
							// JSON (e.g. 'request.method') or a string template with
							// variables that resolve to patterns (e.g. "Hello,
							// {auth.identity.name}!").
							// Any pattern supported by
							// https://pkg.go.dev/github.com/tidwall/gjson can be used.
							// The following Authorino custom modifiers are supported:
							// @extract:{sep:" ",pos:0}, @replace{old:"",new:""},
							// @case:upper|lower, @base64:encode|decode and @strip.
							selector?: string

							// Static value
							value?: _
						}

						// Priority group of the config.
						// All configs in the same priority group are evaluated
						// concurrently; consecutive priority groups are evaluated
						// sequentially.
						priority?: int | *0

						// Conditions for Authorino to enforce this config.
						// If omitted, the config will be enforced for all requests.
						// If present, all conditions must match for the config to be
						// enforced; otherwise, the config will be skipped.
						when?: [...{
							// A list of pattern expressions to be evaluated as a logical AND.
							all?: [...{}]

							// A list of pattern expressions to be evaluated as a logical OR.
							any?: [...{}]

							// The binary operator to be applied to the content fetched from
							// the authorization JSON, for comparison with "value".
							// Possible values are: "eq" (equal to), "neq" (not equal to),
							// "incl" (includes; for arrays), "excl" (excludes; for arrays),
							// "matches" (regex)
							operator?: "eq" | "neq" | "incl" | "excl" | "matches"

							// Reference to a named set of pattern expressions
							patternRef?: string
							predicate?:  string

							// Path selector to fetch content from the authorization JSON
							// (e.g. 'request.method').
							// Any pattern supported by
							// https://pkg.go.dev/github.com/tidwall/gjson can be used.
							// Authorino custom JSON path modifiers are also supported.
							selector?: string

							// The value of reference for the comparison with the content
							// fetched from the authorization JSON.
							// If used with the "matches" operator, the value must compile to
							// a valid Golang regex.
							value?: string
						}]

						// Authorino Festival Wristband token
						wristband?: {
							// Any claims to be added to the wristband token apart from the
							// standard JWT claims (iss, iat, exp) added by default.
							customClaims?: {
								[string]: {
									expression?: string

									// Simple path selector to fetch content from the authorization
									// JSON (e.g. 'request.method') or a string template with
									// variables that resolve to patterns (e.g. "Hello,
									// {auth.identity.name}!").
									// Any pattern supported by
									// https://pkg.go.dev/github.com/tidwall/gjson can be used.
									// The following Authorino custom modifiers are supported:
									// @extract:{sep:" ",pos:0}, @replace{old:"",new:""},
									// @case:upper|lower, @base64:encode|decode and @strip.
									selector?: string

									// Static value
									value?: _
								}
							}

							// The endpoint to the Authorino service that issues the wristband
							// (format: <scheme>://<host>:<port>/<realm>, where <realm> =
							// <namespace>/<authorino-auth-config-resource-name/wristband-config-name)
							issuer: string

							// Reference by name to Kubernetes secrets and corresponding
							// signing algorithms.
							// The secrets must contain a `key.pem` entry whose value is the
							// signing key formatted as PEM.
							signingKeyRefs: [...{
								// Algorithm to sign the wristband token using the signing key
								// provided
								algorithm: "ES256" | "ES384" | "ES512" | "RS256" | "RS384" | "RS512"

								// Name of the signing key.
								// The value is used to reference the Kubernetes secret that
								// stores the key and in the `kid` claim of the wristband token
								// header.
								name: string
							}]

							// Time span of the wristband token, in seconds.
							tokenDuration?: int
						}
					}
				}

				// Custom headers to inject in the request.
				headers?: {
					[string]: {
						// Caching options for the resolved object returned when applying
						// this config.
						// Omit it to avoid caching objects for this config.
						cache?: {
							// Key used to store the entry in the cache.
							// The resolved key must be unique within the scope of this
							// particular config.
							key: {
								expression?: string

								// Simple path selector to fetch content from the authorization
								// JSON (e.g. 'request.method') or a string template with
								// variables that resolve to patterns (e.g. "Hello,
								// {auth.identity.name}!").
								// Any pattern supported by
								// https://pkg.go.dev/github.com/tidwall/gjson can be used.
								// The following Authorino custom modifiers are supported:
								// @extract:{sep:" ",pos:0}, @replace{old:"",new:""},
								// @case:upper|lower, @base64:encode|decode and @strip.
								selector?: string

								// Static value
								value?: _
							}

							// Duration (in seconds) of the external data in the cache before
							// pulled again from the source.
							ttl?: int | *60
						}
						json?: {
							properties: {
								[string]: {
									expression?: string

									// Simple path selector to fetch content from the authorization
									// JSON (e.g. 'request.method') or a string template with
									// variables that resolve to patterns (e.g. "Hello,
									// {auth.identity.name}!").
									// Any pattern supported by
									// https://pkg.go.dev/github.com/tidwall/gjson can be used.
									// The following Authorino custom modifiers are supported:
									// @extract:{sep:" ",pos:0}, @replace{old:"",new:""},
									// @case:upper|lower, @base64:encode|decode and @strip.
									selector?: string

									// Static value
									value?: _
								}
							}
						}

						// The key used to add the custom response item (name of the HTTP
						// header or root property of the Dynamic Metadata object).
						// If omitted, it will be set to the name of the response config.
						key?: string

						// Whether this config should generate individual observability
						// metrics
						metrics?: bool | *false

						// Plain text content
						plain?: {
							expression?: string

							// Simple path selector to fetch content from the authorization
							// JSON (e.g. 'request.method') or a string template with
							// variables that resolve to patterns (e.g. "Hello,
							// {auth.identity.name}!").
							// Any pattern supported by
							// https://pkg.go.dev/github.com/tidwall/gjson can be used.
							// The following Authorino custom modifiers are supported:
							// @extract:{sep:" ",pos:0}, @replace{old:"",new:""},
							// @case:upper|lower, @base64:encode|decode and @strip.
							selector?: string

							// Static value
							value?: _
						}

						// Priority group of the config.
						// All configs in the same priority group are evaluated
						// concurrently; consecutive priority groups are evaluated
						// sequentially.
						priority?: int | *0

						// Conditions for Authorino to enforce this config.
						// If omitted, the config will be enforced for all requests.
						// If present, all conditions must match for the config to be
						// enforced; otherwise, the config will be skipped.
						when?: [...{
							// A list of pattern expressions to be evaluated as a logical AND.
							all?: [...{}]

							// A list of pattern expressions to be evaluated as a logical OR.
							any?: [...{}]

							// The binary operator to be applied to the content fetched from
							// the authorization JSON, for comparison with "value".
							// Possible values are: "eq" (equal to), "neq" (not equal to),
							// "incl" (includes; for arrays), "excl" (excludes; for arrays),
							// "matches" (regex)
							operator?: "eq" | "neq" | "incl" | "excl" | "matches"

							// Reference to a named set of pattern expressions
							patternRef?: string
							predicate?:  string

							// Path selector to fetch content from the authorization JSON
							// (e.g. 'request.method').
							// Any pattern supported by
							// https://pkg.go.dev/github.com/tidwall/gjson can be used.
							// Authorino custom JSON path modifiers are also supported.
							selector?: string

							// The value of reference for the comparison with the content
							// fetched from the authorization JSON.
							// If used with the "matches" operator, the value must compile to
							// a valid Golang regex.
							value?: string
						}]

						// Authorino Festival Wristband token
						wristband?: {
							// Any claims to be added to the wristband token apart from the
							// standard JWT claims (iss, iat, exp) added by default.
							customClaims?: {
								[string]: {
									expression?: string

									// Simple path selector to fetch content from the authorization
									// JSON (e.g. 'request.method') or a string template with
									// variables that resolve to patterns (e.g. "Hello,
									// {auth.identity.name}!").
									// Any pattern supported by
									// https://pkg.go.dev/github.com/tidwall/gjson can be used.
									// The following Authorino custom modifiers are supported:
									// @extract:{sep:" ",pos:0}, @replace{old:"",new:""},
									// @case:upper|lower, @base64:encode|decode and @strip.
									selector?: string

									// Static value
									value?: _
								}
							}

							// The endpoint to the Authorino service that issues the wristband
							// (format: <scheme>://<host>:<port>/<realm>, where <realm> =
							// <namespace>/<authorino-auth-config-resource-name/wristband-config-name)
							issuer: string

							// Reference by name to Kubernetes secrets and corresponding
							// signing algorithms.
							// The secrets must contain a `key.pem` entry whose value is the
							// signing key formatted as PEM.
							signingKeyRefs: [...{
								// Algorithm to sign the wristband token using the signing key
								// provided
								algorithm: "ES256" | "ES384" | "ES512" | "RS256" | "RS384" | "RS512"

								// Name of the signing key.
								// The value is used to reference the Kubernetes secret that
								// stores the key and in the `kid` claim of the wristband token
								// header.
								name: string
							}]

							// Time span of the wristband token, in seconds.
							tokenDuration?: int
						}
					}
				}
			}

			// Customizations on the denial status attributes when the request
			// is unauthenticated.
			// For integration of Authorino via proxy, the proxy must honour
			// the response status attributes specified in this config.
			// Default: 401 Unauthorized
			unauthenticated?: {
				// HTTP response body to override the default denial body.
				body?: {
					expression?: string

					// Simple path selector to fetch content from the authorization
					// JSON (e.g. 'request.method') or a string template with
					// variables that resolve to patterns (e.g. "Hello,
					// {auth.identity.name}!").
					// Any pattern supported by
					// https://pkg.go.dev/github.com/tidwall/gjson can be used.
					// The following Authorino custom modifiers are supported:
					// @extract:{sep:" ",pos:0}, @replace{old:"",new:""},
					// @case:upper|lower, @base64:encode|decode and @strip.
					selector?: string

					// Static value
					value?: _
				}

				// HTTP status code to override the default denial status code.
				code?: uint & >=300 & <=599

				// HTTP response headers to override the default denial headers.
				headers?: {
					[string]: {
						expression?: string

						// Simple path selector to fetch content from the authorization
						// JSON (e.g. 'request.method') or a string template with
						// variables that resolve to patterns (e.g. "Hello,
						// {auth.identity.name}!").
						// Any pattern supported by
						// https://pkg.go.dev/github.com/tidwall/gjson can be used.
						// The following Authorino custom modifiers are supported:
						// @extract:{sep:" ",pos:0}, @replace{old:"",new:""},
						// @case:upper|lower, @base64:encode|decode and @strip.
						selector?: string

						// Static value
						value?: _
					}
				}

				// HTTP message to override the default denial message.
				message?: {
					expression?: string

					// Simple path selector to fetch content from the authorization
					// JSON (e.g. 'request.method') or a string template with
					// variables that resolve to patterns (e.g. "Hello,
					// {auth.identity.name}!").
					// Any pattern supported by
					// https://pkg.go.dev/github.com/tidwall/gjson can be used.
					// The following Authorino custom modifiers are supported:
					// @extract:{sep:" ",pos:0}, @replace{old:"",new:""},
					// @case:upper|lower, @base64:encode|decode and @strip.
					selector?: string

					// Static value
					value?: _
				}
			}

			// Customizations on the denial status attributes when the request
			// is unauthorized.
			// For integration of Authorino via proxy, the proxy must honour
			// the response status attributes specified in this config.
			// Default: 403 Forbidden
			unauthorized?: {
				// HTTP response body to override the default denial body.
				body?: {
					expression?: string

					// Simple path selector to fetch content from the authorization
					// JSON (e.g. 'request.method') or a string template with
					// variables that resolve to patterns (e.g. "Hello,
					// {auth.identity.name}!").
					// Any pattern supported by
					// https://pkg.go.dev/github.com/tidwall/gjson can be used.
					// The following Authorino custom modifiers are supported:
					// @extract:{sep:" ",pos:0}, @replace{old:"",new:""},
					// @case:upper|lower, @base64:encode|decode and @strip.
					selector?: string

					// Static value
					value?: _
				}

				// HTTP status code to override the default denial status code.
				code?: uint & >=300 & <=599

				// HTTP response headers to override the default denial headers.
				headers?: {
					[string]: {
						expression?: string

						// Simple path selector to fetch content from the authorization
						// JSON (e.g. 'request.method') or a string template with
						// variables that resolve to patterns (e.g. "Hello,
						// {auth.identity.name}!").
						// Any pattern supported by
						// https://pkg.go.dev/github.com/tidwall/gjson can be used.
						// The following Authorino custom modifiers are supported:
						// @extract:{sep:" ",pos:0}, @replace{old:"",new:""},
						// @case:upper|lower, @base64:encode|decode and @strip.
						selector?: string

						// Static value
						value?: _
					}
				}

				// HTTP message to override the default denial message.
				message?: {
					expression?: string

					// Simple path selector to fetch content from the authorization
					// JSON (e.g. 'request.method') or a string template with
					// variables that resolve to patterns (e.g. "Hello,
					// {auth.identity.name}!").
					// Any pattern supported by
					// https://pkg.go.dev/github.com/tidwall/gjson can be used.
					// The following Authorino custom modifiers are supported:
					// @extract:{sep:" ",pos:0}, @replace{old:"",new:""},
					// @case:upper|lower, @base64:encode|decode and @strip.
					selector?: string

					// Static value
					value?: _
				}
			}
		}
	}

	// Reference to the object to which this policy applies.
	targetRef: {
		// Group is the group of the target resource.
		group: strings.MaxRunes(253) & {
			=~"^$|^[a-z0-9]([-a-z0-9]*[a-z0-9])?(\\.[a-z0-9]([-a-z0-9]*[a-z0-9])?)*$"
		}

		// Kind is kind of the target resource.
		kind: strings.MaxRunes(63) & strings.MinRunes(1) & {
			=~"^[a-zA-Z]([-a-zA-Z0-9]*[a-zA-Z0-9])?$"
		}

		// Name is the name of the target resource.
		name: strings.MaxRunes(253) & strings.MinRunes(1)

		// SectionName is the name of a section within the target
		// resource. When
		// unspecified, this targetRef targets the entire resource. In the
		// following
		// resources, SectionName is interpreted as the following:
		//
		// * Gateway: Listener name
		// * HTTPRoute: HTTPRouteRule name
		// * Service: Port name
		//
		// If a SectionName is specified, but does not exist on the
		// targeted object,
		// the Policy must fail to attach, and the policy implementation
		// should record
		// a `ResolvedRefs` or similar Condition in the Policy's status.
		sectionName?: strings.MaxRunes(253) & strings.MinRunes(1) & {
			=~"^[a-z0-9]([-a-z0-9]*[a-z0-9])?(\\.[a-z0-9]([-a-z0-9]*[a-z0-9])?)*$"
		}
	}

	// Overall conditions for the policy to be enforced.
	// If omitted, the policy will be enforced at all requests to the
	// protected routes.
	// If present, all conditions must match for the policy to be
	// enforced.
	when?: [...{
		predicate: strings.MinRunes(1)
	}]
}
