// Code generated by timoni. DO NOT EDIT.

//timoni:generate timoni vendor crd -f crds.yaml

package v1

import "strings"

// TLSPolicy is the Schema for the tlspolicies API
#TLSPolicy: {
	// APIVersion defines the versioned schema of this representation
	// of an object.
	// Servers should convert recognized schemas to the latest
	// internal value, and
	// may reject unrecognized values.
	// More info:
	// https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
	apiVersion: "kuadrant.io/v1"

	// Kind is a string value representing the REST resource this
	// object represents.
	// Servers may infer this from the endpoint the client submits
	// requests to.
	// Cannot be updated.
	// In CamelCase.
	// More info:
	// https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
	kind: "TLSPolicy"
	metadata!: {
		name!: strings.MaxRunes(253) & strings.MinRunes(1) & {
			string
		}
		namespace!: strings.MaxRunes(63) & strings.MinRunes(1) & {
			string
		}
		labels?: {
			[string]: string
		}
		annotations?: {
			[string]: string
		}
	}

	// TLSPolicySpec defines the desired state of TLSPolicy
	spec!: #TLSPolicySpec
}

// TLSPolicySpec defines the desired state of TLSPolicy
#TLSPolicySpec: {
	// CommonName is a common name to be used on the Certificate.
	// The CommonName should have a length of 64 characters or fewer
	// to avoid
	// generating invalid CSRs.
	// This value is ignored by TLS clients when any subject alt name
	// is set.
	// This is x509 behaviour:
	// https://tools.ietf.org/html/rfc6125#section-6.4.4
	commonName?: string

	// The requested 'duration' (i.e. lifetime) of the Certificate.
	// This option
	// may be ignored/overridden by some issuer types. If unset this
	// defaults to
	// 90 days. Certificate will be renewed either 2/3 through its
	// duration or
	// `renewBefore` period before its expiry, whichever is later.
	// Minimum
	// accepted duration is 1 hour. Value must be in units accepted by
	// Go
	// time.ParseDuration https://golang.org/pkg/time/#ParseDuration
	duration?: string

	// IssuerRef is a reference to the issuer for this certificate.
	// If the `kind` field is not set, or set to `Issuer`, an Issuer
	// resource
	// with the given name in the same namespace as the Certificate
	// will be used.
	// If the `kind` field is set to `ClusterIssuer`, a ClusterIssuer
	// with the
	// provided name will be used.
	// The `name` field in this stanza is required at all times.
	issuerRef: {
		// Group of the resource being referred to.
		group?: string

		// Kind of the resource being referred to.
		kind?: string

		// Name of the resource being referred to.
		name: string
	}

	// Options to control private keys used for the Certificate.
	privateKey?: {
		// Algorithm is the private key algorithm of the corresponding
		// private key
		// for this certificate.
		//
		// If provided, allowed values are either `RSA`, `ECDSA` or
		// `Ed25519`.
		// If `algorithm` is specified and `size` is not provided,
		// key size of 2048 will be used for `RSA` key algorithm and
		// key size of 256 will be used for `ECDSA` key algorithm.
		// key size is ignored when using the `Ed25519` key algorithm.
		algorithm?: "RSA" | "ECDSA" | "Ed25519"

		// The private key cryptography standards (PKCS) encoding for this
		// certificate's private key to be encoded in.
		//
		// If provided, allowed values are `PKCS1` and `PKCS8` standing
		// for PKCS#1
		// and PKCS#8, respectively.
		// Defaults to `PKCS1` if not specified.
		encoding?: "PKCS1" | "PKCS8"

		// RotationPolicy controls how private keys should be regenerated
		// when a
		// re-issuance is being processed.
		//
		// If set to `Never`, a private key will only be generated if one
		// does not
		// already exist in the target `spec.secretName`. If one does
		// exist but it
		// does not have the correct algorithm or size, a warning will be
		// raised
		// to await user intervention.
		// If set to `Always`, a private key matching the specified
		// requirements
		// will be generated whenever a re-issuance occurs.
		// Default is `Never` for backward compatibility.
		rotationPolicy?: "Never" | "Always"

		// Size is the key bit size of the corresponding private key for
		// this certificate.
		//
		// If `algorithm` is set to `RSA`, valid values are `2048`, `4096`
		// or `8192`,
		// and will default to `2048` if not specified.
		// If `algorithm` is set to `ECDSA`, valid values are `256`, `384`
		// or `521`,
		// and will default to `256` if not specified.
		// If `algorithm` is set to `Ed25519`, Size is ignored.
		// No other values are allowed.
		size?: int
	}

	// How long before the currently issued certificate's expiry
	// cert-manager should renew the certificate. The default is 2/3
	// of the
	// issued certificate's duration. Minimum accepted value is 5
	// minutes.
	// Value must be in units accepted by Go time.ParseDuration
	// https://golang.org/pkg/time/#ParseDuration
	renewBefore?: string

	// RevisionHistoryLimit is the maximum number of
	// CertificateRequest revisions
	// that are maintained in the Certificate's history. Each revision
	// represents
	// a single `CertificateRequest` created by this Certificate,
	// either when it
	// was created, renewed, or Spec was changed. Revisions will be
	// removed by
	// oldest first if the number of revisions exceeds this number. If
	// set,
	// revisionHistoryLimit must be a value of `1` or greater. If
	// unset (`nil`),
	// revisions will not be garbage collected. Default value is
	// `nil`.
	revisionHistoryLimit?: int

	// TargetRef identifies an API object to apply policy to.
	targetRef: {
		// Group is the group of the target resource.
		group: strings.MaxRunes(253) & {
			=~"^$|^[a-z0-9]([-a-z0-9]*[a-z0-9])?(\\.[a-z0-9]([-a-z0-9]*[a-z0-9])?)*$"
		}

		// Kind is kind of the target resource.
		kind: strings.MaxRunes(63) & strings.MinRunes(1) & {
			=~"^[a-zA-Z]([-a-zA-Z0-9]*[a-zA-Z0-9])?$"
		}

		// Name is the name of the target resource.
		name: strings.MaxRunes(253) & strings.MinRunes(1)

		// SectionName is the name of a section within the target
		// resource. When
		// unspecified, this targetRef targets the entire resource. In the
		// following
		// resources, SectionName is interpreted as the following:
		//
		// * Gateway: Listener name
		// * HTTPRoute: HTTPRouteRule name
		// * Service: Port name
		//
		// If a SectionName is specified, but does not exist on the
		// targeted object,
		// the Policy must fail to attach, and the policy implementation
		// should record
		// a `ResolvedRefs` or similar Condition in the Policy's status.
		sectionName?: strings.MaxRunes(253) & strings.MinRunes(1) & {
			=~"^[a-z0-9]([-a-z0-9]*[a-z0-9])?(\\.[a-z0-9]([-a-z0-9]*[a-z0-9])?)*$"
		}
	}

	// Usages is the set of x509 usages that are requested for the
	// certificate.
	// Defaults to `digital signature` and `key encipherment` if not
	// specified.
	usages?: [..."signing" | "digital signature" | "content commitment" | "key encipherment" | "key agreement" | "data encipherment" | "cert sign" | "crl sign" | "encipher only" | "decipher only" | "any" | "server auth" | "client auth" | "code signing" | "email protection" | "s/mime" | "ipsec end system" | "ipsec tunnel" | "ipsec user" | "timestamping" | "ocsp signing" | "microsoft sgc" | "netscape sgc"]
}
